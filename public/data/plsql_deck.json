
{
  "id": "plsql_deck",
  "name": "PL/SQL Fundamentals & Best Practices",
  "description": "A comprehensive deck covering key concepts, syntax, and best practices for Oracle PL/SQL development, with multiple questions per topic to reinforce learning.",
  "isAiGenerated": false,
  "language": "sql",
  "cards": [
    {
      "category": "Package Structure",
      "hint": "Acts as the public interface or 'contract' of the package.",
      "question": "Which part of a PL/SQL package declares the public elements accessible by other programs?",
      "options": ["Package Body", "Package Specification", "Anonymous Block"],
      "correctAnswer": "Package Specification",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PACKAGE company_api IS\n  PROCEDURE hire_employee(p_name IN VARCHAR2);\nEND company_api;"
      }
    },
    {
      "category": "Package Structure",
      "hint": "Contains the actual implementation and private logic.",
      "question": "Where is the detailed PL/SQL code for procedures and functions implemented?",
      "options": ["Specification", "Header", "Body"],
      "correctAnswer": "Body",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PACKAGE BODY company_api IS\n  PROCEDURE hire_employee(p_name IN VARCHAR2) IS\n  BEGIN\n    INSERT INTO employees (name) VALUES (p_name);\n  END hire_employee;\nEND company_api;"
      }
    },
    {
      "category": "Package Structure",
      "hint": "This part of the package can contain logic that is not exposed to the outside world.",
      "question": "How does a package `BODY` support the principle of encapsulation?",
      "options": ["By encrypting its code", "By allowing private subprograms", "By connecting to a different user"],
      "correctAnswer": "By allowing private subprograms",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PACKAGE BODY my_pkg IS\n  FUNCTION is_valid(p_id IN NUMBER) RETURN BOOLEAN IS\n  BEGIN\n    RETURN p_id IS NOT NULL;\n  END;\n\n  PROCEDURE public_proc IS\n  BEGIN\n    IF is_valid(123) THEN NULL; END IF;\n  END;\nEND my_pkg;"
      }
    },
    {
      "category": "Package Structure",
      "hint": "A primary benefit of grouping related logic into a single database object.",
      "question": "What is a major performance benefit of using PL/SQL packages?",
      "options": ["They use less disk space", "The entire package is loaded into memory on first call", "They automatically create indexes"],
      "correctAnswer": "The entire package is loaded into memory on first call",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN\n  -- First call loads my_package into memory\n  my_package.proc1();\n  -- Subsequent calls are faster, no reloading needed\n  my_package.proc2();\nEND;"
      }
    },
    {
      "category": "Documentation",
      "hint": "A special comment tag used to describe a parameter for documentation generators.",
      "question": "In `/*# @param P_ITEM_ID ... */`, what is the purpose of the `@param` tag?",
      "options": ["To define a variable", "To create a parameter", "To document a parameter for tools"],
      "correctAnswer": "To document a parameter for tools",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "/*# @param P_ITEM_ID The unique identifier for the item. */\nPROCEDURE ADD_ITEM(P_ITEM_ID IN NUMBER);"
      }
    },
    {
      "category": "Documentation",
      "hint": "This annotation often indicates the intended audience or visibility.",
      "question": "What does the `@rep:scope public` annotation typically signify in Oracle development standards?",
      "options": ["The code is a report", "The code is for public use", "The code is in the public domain"],
      "correctAnswer": "The code is for public use",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "/*# @rep:scope public @rep:displayname Get User Roles */\nPROCEDURE GET_ROLES(p_user_id IN NUMBER);"
      }
    },
    {
      "category": "Data Types",
      "hint": "Used for large character data, such as a full JSON response.",
      "question": "Which data type is essential for storing exceptionally large character data?",
      "options": ["VARCHAR2(4000)", "CLOB", "BLOB"],
      "correctAnswer": "CLOB",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  l_json_payload CLOB;\nBEGIN\n  l_json_payload := '{\"key\": \"very_long_value...\"}';\nEND;"
      }
    },
    {
      "category": "Data Types",
      "hint": "Stores raw, unstructured data such as images or documents.",
      "question": "While `CLOB` stores large text, what does the `BLOB` data type store?",
      "options": ["Only numbers", "XML documents", "Binary data like images or files"],
      "correctAnswer": "Binary data like images or files",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TABLE file_storage (\n  file_id    NUMBER PRIMARY KEY,\n  file_name  VARCHAR2(100),\n  file_data  BLOB\n);"
      }
    },
    {
      "category": "Data Types",
      "hint": "The most common data type for variable-length strings.",
      "question": "For storing a user's name or an API token, the standard data type to use is...",
      "options": ["CHAR", "VARCHAR2", "STRING"],
      "correctAnswer": "VARCHAR2",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  l_user_name VARCHAR2(100) := 'John Doe';\nBEGIN\n  NULL;\nEND;"
      }
    },
    {
        "category": "Data Types",
        "hint": "This attribute anchors a variable's data type to that of a specific database table column.",
        "question": "How can you declare a variable that automatically inherits the data type of a table column?",
        "options": ["AS TYPE", "%TYPE", "LIKE"],
        "correctAnswer": "%TYPE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  l_last_name employees.last_name%TYPE;\nBEGIN\n  SELECT last_name INTO l_last_name FROM employees WHERE employee_id = 100;\nEND;"
        }
    },
    {
        "category": "Data Types",
        "hint": "This attribute creates a record variable that has the same structure as a full row in a table.",
        "question": "What attribute do you use to declare a record variable that can hold an entire row from a table?",
        "options": ["%ROW", "%ROWTYPE", "%STRUCT"],
        "correctAnswer": "%ROWTYPE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  l_employee_rec employees%ROWTYPE;\nBEGIN\n  SELECT * INTO l_employee_rec FROM employees WHERE employee_id = 100;\nEND;"
        }
    },
    {
        "category": "Data Types",
        "hint": "A key advantage of using %TYPE and %ROWTYPE.",
        "question": "What is the primary benefit of using `%TYPE` and `%ROWTYPE` for variable declarations?",
        "options": ["They use less memory", "They automatically adapt if the underlying table structure changes", "They make code run faster"],
        "correctAnswer": "They automatically adapt if the underlying table structure changes",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  l_emp_name  employees.last_name%TYPE;\n  l_dept_rec  departments%ROWTYPE;\nBEGIN\n  -- This code will not break if employees.last_name changes from VARCHAR2(50) to VARCHAR2(100)\n  NULL;\nEND;"
        }
    },
    {
        "category": "Data Types",
        "hint": "A format that includes both date and time components.",
        "question": "Which data type is appropriate for storing a precise moment, such as a transaction timestamp?",
        "options": ["DATE", "TIMESTAMP", "TIME"],
        "correctAnswer": "DATE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  l_request_date DATE := SYSDATE;\nBEGIN\n  INSERT INTO logs (log_time) VALUES (l_request_date);\nEND;"
        }
    },
    {
        "category": "Custom Types",
        "hint": "It's like a blueprint for an object, grouping related fields.",
        "question": "What does `TYPE ... IS RECORD` define in PL/SQL?",
        "options": ["A database table", "A collection of records", "A structured data type"],
        "correctAnswer": "A structured data type",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  TYPE item_rec_type IS RECORD (\n    item_id   NUMBER,\n    quantity  NUMBER\n  );\n  l_item item_rec_type;\nBEGIN\n  l_item.item_id := 123;\nEND;"
        }
    },
    {
        "category": "Custom Types",
        "hint": "It's a collection of structured objects, like a list or array.",
        "question": "What does `TYPE ... IS TABLE OF <RECORD_TYPE>` create?",
        "options": ["A single record", "An array of records", "A physical database table"],
        "correctAnswer": "An array of records",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  TYPE item_rec_type IS RECORD (item_id NUMBER);\n  TYPE item_tbl_type IS TABLE OF item_rec_type;\n  l_items item_tbl_type;\nBEGIN\n  NULL;\nEND;"
        }
    },
    {
        "category": "Custom Types",
        "hint": "The declaration location required for custom types to be used by external applications.",
        "question": "To be used as parameters in public procedures, where must a custom RECORD or TABLE type be declared?",
        "options": ["In the Package Body", "In the Package Specification", "In a separate script"],
        "correctAnswer": "In the Package Specification",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "PACKAGE my_api_spec IS\n  TYPE my_record IS RECORD (id NUMBER, name VARCHAR2(100));\n  PROCEDURE process_data(p_item IN my_record);\nEND my_api_spec;"
        }
    },
    {
        "category": "Custom Types",
        "hint": "This syntax makes the collection work like an array with numeric keys.",
        "question": "In `TYPE ... IS TABLE OF ... INDEX BY BINARY_INTEGER;`, what is the purpose of `INDEX BY BINARY_INTEGER`?",
        "options": ["It creates a database index", "It defines the collection as an associative array", "It limits the table to integer data"],
        "correctAnswer": "It defines the collection as an associative array",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  TYPE t_name_list IS TABLE OF VARCHAR2(100) INDEX BY BINARY_INTEGER;\n  l_names t_name_list;\nBEGIN\n  l_names(1) := 'John';\n  l_names(100) := 'Jane';\nEND;"
        }
    },
    {
        "category": "Custom Types",
        "hint": "The syntax for accessing a specific field within a record variable.",
        "question": "If `v_item` is a variable of `ITEM_REC_TYPE`, how do you access its `QUANTITY` field?",
        "options": ["v_item('QUANTITY')", "v_item.QUANTITY", "QUANTITY(v_item)"],
        "correctAnswer": "v_item.QUANTITY",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "DECLARE\n  TYPE ITEM_REC_TYPE IS RECORD (QUANTITY NUMBER);\n  v_item ITEM_REC_TYPE;\n  l_qty NUMBER;\nBEGIN\n  v_item.QUANTITY := 10;\n  l_qty := v_item.QUANTITY;\nEND;"
        }
    },
    {
      "category": "Cursors",
      "hint": "A pointer to a result set, used to return query results to a client app.",
      "question": "Which cursor type is most flexible for returning dynamic query results from a procedure?",
      "options": ["Static Cursor", "Implicit Cursor", "SYS_REFCURSOR"],
      "correctAnswer": "SYS_REFCURSOR",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE GET_DATA(p_results OUT SYS_REFCURSOR)\nIS\nBEGIN\n  OPEN p_results FOR SELECT * FROM employees;\nEND;"
      }
    },
    {
      "category": "Cursors",
      "hint": "Associates a SELECT statement with a cursor variable at runtime.",
      "question": "Which command is used to assign a query to a `SYS_REFCURSOR` variable?",
      "options": ["FETCH ... INTO", "SELECT ... INTO", "OPEN ... FOR"],
      "correctAnswer": "OPEN ... FOR",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  l_cursor SYS_REFCURSOR;\nBEGIN\n  OPEN l_cursor FOR 'SELECT * FROM departments';\nEND;"
      }
    },
    {
      "category": "Cursors",
      "hint": "A query that is defined at compile time and given a name.",
      "question": "A cursor declared with a name and a fixed `SELECT` statement in the `DECLARE` section is what kind of cursor?",
      "options": ["Dynamic", "Explicit", "Anonymous"],
      "correctAnswer": "Explicit",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  CURSOR active_users_cur IS\n    SELECT user_name FROM users WHERE status = 'ACTIVE';\nBEGIN\n  NULL;\nEND;"
      }
    },
    {
      "category": "Cursors",
      "hint": "The opposite of a static cursor whose query is fixed at compile time.",
      "question": "A `SYS_REFCURSOR` is a form of which cursor type, because its query can be decided at runtime?",
      "options": ["Dynamic", "Broken", "Implicit"],
      "correctAnswer": "Dynamic",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE get_report(p_type IN VARCHAR2, p_data OUT SYS_REFCURSOR) IS\n  l_query VARCHAR2(500);\nBEGIN\n  IF p_type = 'SALES' THEN\n    l_query := 'SELECT * FROM sales_view';\n  ELSE\n    l_query := 'SELECT * FROM inventory_view';\n  END IF;\n  OPEN p_data FOR l_query;\nEND;"
      }
    },
    {
      "category": "Cursors",
      "hint": "The `FOR ... IN` loop simplifies cursor handling by managing three key steps.",
      "question": "When using a `FOR ... IN cursor_name LOOP`, which steps are done automatically for you?",
      "options": ["DECLARE, COMMIT, ROLLBACK", "OPEN, FETCH, CLOSE", "SELECT, UPDATE, DELETE"],
      "correctAnswer": "OPEN, FETCH, CLOSE",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  CURSOR c_emp IS SELECT last_name FROM employees;\nBEGIN\n  -- No explicit OPEN, FETCH, or CLOSE is needed here.\n  FOR emp_rec IN c_emp LOOP\n    DBMS_OUTPUT.PUT_LINE(emp_rec.last_name);\n  END LOOP;\nEND;"
      }
    },
    {
      "category": "Control Flow",
      "hint": "The standard way to iterate over rows from a cursor.",
      "question": "Which loop structure is best for processing each row returned by a cursor?",
      "options": ["WHILE LOOP", "Basic LOOP", "FOR ... IN ... LOOP"],
      "correctAnswer": "FOR ... IN ... LOOP",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN\n  FOR user_rec IN (SELECT user_id, user_name FROM users) LOOP\n    DBMS_OUTPUT.PUT_LINE(user_rec.user_name);\n  END LOOP;\nEND;"
      }
    },
    {
      "category": "Control Flow",
      "hint": "The fundamental structure for handling runtime errors.",
      "question": "Which PL/SQL block structure is used for structured error handling?",
      "options": ["IF/THEN/ELSE", "TRY/CATCH", "BEGIN/EXCEPTION/END"],
      "correctAnswer": "BEGIN/EXCEPTION/END",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN\n  l_value := 1 / 0;\nEXCEPTION\n  WHEN ZERO_DIVIDE THEN\n    log_error('Division by zero occurred.');\nEND;"
      }
    },
    {
      "category": "Control Flow",
      "hint": "The final branch of a conditional structure that catches all other cases.",
      "question": "In an `IF` statement, which block of code is executed if all preceding `IF` and `ELSIF` conditions are false?",
      "options": ["ELSE", "END IF", "WHEN OTHERS"],
      "correctAnswer": "ELSE",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "IF l_status = 'A' THEN\n  NULL;\nELSIF l_status = 'B' THEN\n  NULL;\nELSE\n  -- This block executes.\n  NULL;\nEND IF;"
      }
    },
    {
      "category": "Control Flow",
      "hint": "It is a 'catch-all' for any runtime error that wasn't handled specifically.",
      "question": "What is the purpose of the `WHEN OTHERS` clause in an `EXCEPTION` block?",
      "options": ["To handle successful completion", "To catch any error not previously specified", "To run when there is no data"],
      "correctAnswer": "To catch any error not previously specified",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    log_error('Not found.');\n  WHEN OTHERS THEN\n    log_error('An unexpected error occurred.');\nEND;"
      }
    },
    {
        "category": "Control Structures",
        "hint": "The primary structure in PL/SQL for making decisions and executing code conditionally.",
        "question": "What is the primary construct in PL/SQL for conditional logic?",
        "options": ["LOOP ... END LOOP", "IF ... THEN ... END IF", "CASE ... WHEN ... END CASE"],
        "correctAnswer": "IF ... THEN ... END IF",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "IF l_balance > 500 THEN\n  l_can_withdraw := TRUE;\nEND IF;"
        }
    },
    {
        "category": "Control Structures",
        "hint": "A structure that allows for choosing one sequence of statements from several alternatives.",
        "question": "Which structure is often more readable than a long series of `IF/ELSIF` statements for checking a single variable against multiple values?",
        "options": ["A `FOR` loop", "A `CASE` statement", "A `GOTO` statement"],
        "correctAnswer": "A `CASE` statement",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "CASE l_status\n  WHEN 'A' THEN l_status_desc := 'Active';\n  WHEN 'I' THEN l_status_desc := 'Inactive';\n  ELSE l_status_desc := 'Unknown';\nEND CASE;"
        }
    },
    {
      "category": "Subprograms",
      "hint": "Performs an action but does not have to return a value.",
      "question": "A named PL/SQL block designed to perform an action (like deleting a record) is called a...",
      "options": ["Function", "Procedure", "Trigger"],
      "correctAnswer": "Procedure",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE delete_line (p_line_id IN NUMBER)\nIS\nBEGIN\n  DELETE FROM order_lines WHERE line_id = p_line_id;\nEND delete_line;"
      }
    },
    {
      "category": "Subprograms",
      "hint": "Must return a value and can be used in SQL queries.",
      "question": "A named PL/SQL block that must compute and `RETURN` a value is called a...",
      "options": ["Procedure", "Function", "View"],
      "correctAnswer": "Function",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "FUNCTION get_stock_count (p_item_id IN NUMBER) RETURN NUMBER\nIS\n  l_stock NUMBER;\nBEGIN\n  SELECT quantity INTO l_stock FROM inventory;\n  RETURN l_stock;\nEND;"
      }
    },
    {
      "category": "Subprograms",
      "hint": "One is designed for actions, the other for calculations.",
      "question": "You would use a ... to delete a record, and a ... to calculate a value.",
      "options": ["function, procedure", "procedure, function", "trigger, procedure"],
      "correctAnswer": "procedure, function",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN\n  delete_employee(7839); -- Procedure call (action)\n  l_name := get_employee_name(7839); -- Function call (calculation)\nEND;"
      }
    },
    {
      "category": "Subprograms",
      "hint": "One can be called directly in a `SELECT` list, the other generally cannot.",
      "question": "Which type of subprogram can be called directly within a SQL `SELECT` statement?",
      "options": ["Procedure", "Anonymous Block", "Function"],
      "correctAnswer": "Function",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT product_name, GET_STOCK_COUNT(product_id) FROM products;"
      }
    },
    {
      "category": "Joins",
      "hint": "The (+) symbol is an old, vendor-specific syntax for this type of join.",
      "question": "In Oracle's old syntax, what does the `(+)` operator signify in a `WHERE` clause?",
      "options": ["Inner Join", "Outer Join", "Cross Join"],
      "correctAnswer": "Outer Join",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT e.name, d.name\nFROM employees e, departments d\nWHERE e.department_id = d.department_id (+);"
      }
    },
    {
      "category": "Joins",
      "hint": "The most common join, returns only rows that match in both tables.",
      "question": "Which type of join would you use to get a list of customers who have placed orders?",
      "options": ["LEFT JOIN", "INNER JOIN", "FULL OUTER JOIN"],
      "correctAnswer": "INNER JOIN",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT c.customer_name, o.order_date\nFROM customers c\nINNER JOIN orders o ON c.customer_id = o.customer_id;"
      }
    },
    {
      "category": "Joins",
      "hint": "Returns all rows from the left table, even if there's no match in the right table.",
      "question": "To get a list of ALL customers and their orders (if any), which join should be used?",
      "options": ["INNER JOIN", "RIGHT JOIN", "LEFT JOIN"],
      "correctAnswer": "LEFT JOIN",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT c.customer_name, o.order_number\nFROM customers c\nLEFT JOIN orders o ON c.customer_id = o.customer_id;"
      }
    },
    {
      "category": "Joins",
      "hint": "This is the modern, explicit ANSI syntax for joining tables.",
      "question": "Which syntax is the modern, preferred way to write an `INNER JOIN`?",
      "options": ["FROM t1, t2 WHERE t1.id = t2.id", "FROM t1 INNER JOIN t2 ON t1.id = t2.id", "FROM t1, t2 (+)"],
      "correctAnswer": "FROM t1 INNER JOIN t2 ON t1.id = t2.id",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT e.last_name, d.department_name\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id;"
      }
    },
    {
      "category": "Joins",
      "hint": "The part of the join syntax that specifies how the tables are related.",
      "question": "In the modern `JOIN` syntax, the `ON` clause is used to specify the...",
      "options": ["columns to select", "join condition", "tables to use"],
      "correctAnswer": "join condition",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT ...\nFROM employees e\nINNER JOIN departments d ON e.department_id = d.department_id;"
      }
    },
    {
      "category": "Aliases",
      "hint": "Makes queries shorter and more readable by assigning a temporary name to a table.",
      "question": "In `FROM ra_customer_trx_all trx`, what is the purpose of `trx`?",
      "options": ["It's a data type", "It's a table alias", "It's a required keyword"],
      "correctAnswer": "It's a table alias",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT ord.order_number FROM oe_order_headers_all ord;"
      }
    },
    {
      "category": "Aliases",
      "hint": "Gives a new, more readable name to a column in the result set.",
      "question": "What is the purpose of `AS PAYMENT_NUMBER` in `SELECT rec.receipt_number AS PAYMENT_NUMBER`?",
      "options": ["To change the data type", "To create a column alias", "To filter the results"],
      "correctAnswer": "To create a column alias",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT h.header_id AS OrderId FROM oe_order_headers_all h;"
      }
    },
    {
      "category": "Aliases",
      "hint": "Why aliases are crucial for APIs returning structured data.",
      "question": "Why is aliasing columns (e.g., `SELECT c.id AS CustomerId`) particularly important for backend APIs?",
      "options": ["It makes the query run faster", "It provides stable, predictable keys for JSON", "It is required by the database"],
      "correctAnswer": "It provides stable, predictable keys for JSON",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT \n  order_header_id AS \"orderId\",\n  creation_date   AS \"creationDate\"\nFROM oe_order_headers_all;"
      }
    },
    {
      "category": "Keywords",
      "hint": "Used to introduce the implementation section of a block.",
      "question": "The keyword `AS` or `IS` separates the signature of a subprogram from its...",
      "options": ["Parameters", "Name", "Implementation Block"],
      "correctAnswer": "Implementation Block",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PACKAGE BODY my_package AS\n  -- Implementation starts here\nEND my_package;"
      }
    },
    {
      "category": "Keywords",
      "hint": "These two keywords are interchangeable when defining a subprogram.",
      "question": "In a procedure or package definition, the keyword `IS` can always be replaced by...",
      "options": ["AS", "BEGIN", "DEFINE"],
      "correctAnswer": "AS",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE my_proc_1 IS BEGIN NULL; END;\nPROCEDURE my_proc_2 AS BEGIN NULL; END;"
      }
    },
    {
      "category": "Parameters",
      "hint": "The parameter's value is passed into the procedure and cannot be changed.",
      "question": "What does the `IN` mode mean for a procedure parameter?",
      "options": ["The procedure can write to it", "It is read-only inside the procedure", "It is both readable and writable"],
      "correctAnswer": "It is read-only inside the procedure",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE print_message(p_message IN VARCHAR2);"
      }
    },
    {
      "category": "Parameters",
      "hint": "The procedure uses this parameter to pass a value back to the caller.",
      "question": "What is the purpose of an `OUT` parameter?",
      "options": ["To receive a value from the caller", "To return a value to the caller", "To be ignored by the procedure"],
      "correctAnswer": "To return a value to the caller",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE get_user_status(p_user_id IN NUMBER, p_status OUT VARCHAR2);"
      }
    },
    {
      "category": "Parameters",
      "hint": "A parameter that can be both read from and written to within a subprogram.",
      "question": "Which parameter mode allows a value to be passed in, modified, and passed back out?",
      "options": ["IN", "OUT", "IN OUT"],
      "correctAnswer": "IN OUT",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE increment_counter(p_counter IN OUT NUMBER);"
      }
    },
    {
      "category": "Parameters",
      "hint": "This is the default parameter mode if none is specified.",
      "question": "If a parameter is declared without a mode (e.g., `p_user_id NUMBER`), what is its default mode?",
      "options": ["IN", "OUT", "IN OUT"],
      "correctAnswer": "IN",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "PROCEDURE get_user(p_user_id NUMBER)\nIS\nBEGIN\n  -- p_user_id is implicitly an IN parameter\n  NULL;\nEND;"
      }
    },
    {
      "category": "Transactions",
      "hint": "Makes all pending data modifications permanent.",
      "question": "Which command must be executed to save changes made by `INSERT`, `UPDATE`, or `DELETE` statements?",
      "options": ["SAVEPOINT", "COMMIT", "ROLLBACK"],
      "correctAnswer": "COMMIT",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "UPDATE accounts SET balance = balance - 100;\nCOMMIT;"
      }
    },
    {
      "category": "Transactions",
      "hint": "Undoes changes made in the current transaction.",
      "question": "If an error occurs, which command should be used to undo all previous steps in a transaction?",
      "options": ["COMMIT", "SAVE", "ROLLBACK"],
      "correctAnswer": "ROLLBACK",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN\n  INSERT INTO orders (id) VALUES (1);\n  RAISE an_error;\nEXCEPTION\n  WHEN OTHERS THEN\n    ROLLBACK;\nEND;"
      }
    },
    {
        "category": "Transaction Control",
        "hint": "Establishes a named marker within a transaction, allowing for a partial rollback.",
        "question": "What command do you use to create a point within a transaction to which you can later revert?",
        "options": ["COMMIT", "SAVEPOINT", "CHECKPOINT"],
        "correctAnswer": "SAVEPOINT",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "UPDATE accounts SET balance = balance - 100;\nSAVEPOINT before_update;"
        }
    },
    {
        "category": "Transaction Control",
        "hint": "Undoes all data changes made in the current transaction back to a previously defined marker.",
        "question": "How do you undo a transaction only to a specific named marker?",
        "options": ["ROLLBACK", "REVERT TRANSACTION", "ROLLBACK TO SAVEPOINT"],
        "correctAnswer": "ROLLBACK TO SAVEPOINT",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "ROLLBACK TO SAVEPOINT before_update;"
        }
    },
    {
        "category": "Transaction Control",
        "hint": "You make a change but want to undo it completely.",
        "question": "If you `UPDATE` a row but then issue a `ROLLBACK` command, what happens to the change?",
        "options": ["It is saved permanently", "It is undone", "It is saved temporarily"],
        "correctAnswer": "It is undone",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "BEGIN\n  UPDATE employees SET salary = 50000 WHERE employee_id = 100;\n  ROLLBACK;\n  -- The salary change is reverted\nEND;"
        }
    },
    {
      "category": "Error Handling",
      "hint": "Raises a custom error with a specific number and message.",
      "question": "Which command allows you to stop execution and return a custom error message to the client?",
      "options": ["RAISE_APPLICATION_ERROR", "THROW_EXCEPTION", "EXIT_WITH_ERROR"],
      "correctAnswer": "RAISE_APPLICATION_ERROR",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "RAISE_APPLICATION_ERROR(-20001, 'Insufficient credit.');"
      }
    },
    {
      "category": "Error Handling",
      "hint": "A special variable that holds the numeric error code.",
      "question": "Inside an `EXCEPTION` block, which variable contains the numeric code of the error that occurred?",
      "options": ["SQLCODE", "SQLERRM", "ERROR_CODE"],
      "correctAnswer": "SQLCODE",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "EXCEPTION\n  WHEN OTHERS THEN\n    log_error('Error occurred: ' || SQLCODE);\nEND;"
      }
    },
    {
      "category": "Error Handling",
      "hint": "A special variable that holds the error message text.",
      "question": "Inside an `EXCEPTION` block, which variable contains the descriptive text of the error?",
      "options": ["SQLMESSAGE", "SQLCODE", "SQLERRM"],
      "correctAnswer": "SQLERRM",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "EXCEPTION\n  WHEN OTHERS THEN\n    log_error('Error details: ' || SQLERRM);\nEND;"
      }
    },
    {
        "category": "Error Handling",
        "hint": "Occurs when a SELECT...INTO statement is executed but the query does not return any rows.",
        "question": "What predefined exception is raised when a SELECT...INTO statement fails to find a row?",
        "options": ["TOO_MANY_ROWS", "ROW_NOT_FOUND", "NO_DATA_FOUND"],
        "correctAnswer": "NO_DATA_FOUND",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "EXCEPTION\n  WHEN NO_DATA_FOUND THEN\n    RETURN NULL;"
        }
    },
    {
        "category": "Error Handling",
        "hint": "Occurs when a SELECT...INTO statement is executed and the query returns more than one row.",
        "question": "What predefined exception is raised when a SELECT...INTO statement returns multiple rows?",
        "options": ["TOO_MANY_ROWS", "MULTIPLE_ROWS_FOUND", "DATA_OVERFLOW"],
        "correctAnswer": "TOO_MANY_ROWS",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "EXCEPTION\n  WHEN TOO_MANY_ROWS THEN\n    RAISE_APPLICATION_ERROR(-20001, 'Ambiguous data found.');"
        }
    },
    {
        "category": "Data Retrieval",
        "hint": "Retrieves data from exactly one row and places it into local variables.",
        "question": "What is the standard syntax in PL/SQL to query a single row and assign its column values to variables?",
        "options": ["FETCH ... INTO", "SELECT ... INTO", "GET ROW ... INTO"],
        "correctAnswer": "SELECT ... INTO",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT first_name, last_name\n  INTO l_first_name, l_last_name\n  FROM employees\n  WHERE employee_id = 100;"
        }
    },
    {
        "category": "Data Retrieval",
        "hint": "This single-row system table is used when you need to select a value without querying a real table.",
        "question": "Which table do you select from to get the result of a function or expression, like SYSDATE?",
        "options": ["SYSTEM", "DUAL", "TEMP"],
        "correctAnswer": "DUAL",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT SYSDATE INTO l_current_date FROM DUAL;"
        }
    },
    {
        "category": "SQL Clauses",
        "hint": "Essential for filtering rows from a table based on one or more conditions.",
        "question": "Which SQL clause is used to specify the criteria that rows must meet to be selected?",
        "options": ["HAVING", "WHERE", "FILTER BY"],
        "correctAnswer": "WHERE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT product_name, price\n  FROM products\n  WHERE price < 50;"
        }
    },
    {
        "category": "SQL Clauses",
        "hint": "Removes duplicate rows to return a unique set of results.",
        "question": "Which keyword is used within a SELECT statement to ensure that a query only returns unique rows?",
        "options": ["UNIQUE", "DISTINCT", "SINGLE"],
        "correctAnswer": "DISTINCT",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT DISTINCT status FROM tasks;"
        }
    },
    {
        "category": "SQL Operators",
        "hint": "The standard Oracle operator for string concatenation.",
        "question": "What is the standard operator for joining two or more character strings together?",
        "options": ["+", "&", "||"],
        "correctAnswer": "||",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "l_full_name := l_first_name || ' ' || l_last_name;"
        }
    },
    {
        "category": "SQL Operators",
        "hint": "Performs pattern matching on string data within a filtering clause.",
        "question": "Which operator is used with wildcards (%) to search for a pattern in a text column?",
        "options": ["MATCH", "LIKE", "CONTAINS"],
        "correctAnswer": "LIKE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT * FROM customers WHERE email LIKE '%@example.com';"
        }
    },
    {
        "category": "SQL Operators",
        "hint": "A shorthand for multiple OR conditions by checking for a value within a list.",
        "question": "What operator is used to check if a value exists within a given set of values?",
        "options": ["BETWEEN", "ANY", "IN"],
        "correctAnswer": "IN",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT * FROM orders WHERE status IN ('PENDING', 'SHIPPED');"
        }
    },
    {
        "category": "SQL Operators",
        "hint": "Efficiently checks for the existence of at least one row in a subquery.",
        "question": "Which operator should you use to check if a subquery returns any rows?",
        "options": ["EXISTS", "COUNT() > 0", "FIND"],
        "correctAnswer": "EXISTS",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT c.customer_name\n  FROM customers c\n  WHERE EXISTS (SELECT 1 FROM orders o WHERE o.customer_id = c.id);"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "Evaluates an expression and, if it is null, returns a specified substitute value.",
        "question": "What function allows you to replace a NULL value with a specific default value?",
        "options": ["IFNULL", "COALESCE", "NVL"],
        "correctAnswer": "NVL",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT product_name, NVL(on_hand_quantity, 0) FROM inventory;"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "The ANSI-standard function for replacing NULL values, which can handle multiple arguments.",
        "question": "Which function is a more flexible, ANSI-standard alternative to `NVL` that can take multiple expressions?",
        "options": ["ISNULL", "DECODE", "COALESCE"],
        "correctAnswer": "COALESCE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT COALESCE(primary_phone, secondary_phone, 'N/A') FROM contacts;"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "Provides inline IF-THEN-ELSE logic, transforming a value based on search-result pairs.",
        "question": "Which Oracle-specific function compares an expression to a series of values and returns a corresponding result?",
        "options": ["CASE", "SWITCH", "DECODE"],
        "correctAnswer": "DECODE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT DECODE(status, 'A', 'Active', 'I', 'Inactive', 'Unknown') FROM user_accounts;"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "Converts all characters in a string to their uppercase equivalents.",
        "question": "What is the standard SQL function for converting a string to all uppercase letters?",
        "options": ["TO_UPPER", "UPPERCASE", "UPPER"],
        "correctAnswer": "UPPER",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT * FROM users WHERE UPPER(username) = 'ADMIN';"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "Removes the time portion from a date value, effectively setting it to midnight.",
        "question": "Which function is used to get just the date part of a DATE or TIMESTAMP value?",
        "options": ["ROUND", "STRIP_TIME", "TRUNC"],
        "correctAnswer": "TRUNC",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT * FROM user_logins WHERE TRUNC(login_time) = TRUNC(SYSDATE);"
        }
    },
    {
        "category": "SQL Functions",
        "hint": "Returns the current date and time from the database server.",
        "question": "Which function should you call to get the current date and time of the database server?",
        "options": ["NOW()", "CURRENT_TIMESTAMP", "SYSDATE"],
        "correctAnswer": "SYSDATE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "INSERT INTO logs (log_timestamp) VALUES (SYSDATE);"
        }
    },
    {
        "category": "Oracle EBS",
        "hint": "This core procedure sets the application context, mandatory for most E-Business Suite APIs.",
        "question": "In Oracle EBS, which procedure initializes the environment by setting User, Responsibility, and Application ID?",
        "options": ["MO_GLOBAL.INIT", "FND_GLOBAL.APPS_INITIALIZE", "FND_SECURITY.INITIALIZE"],
        "correctAnswer": "FND_GLOBAL.APPS_INITIALIZE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "fnd_global.apps_initialize (ln_user_id, l_resp_id, 671);"
        }
    },
    {
        "category": "Oracle EBS",
        "hint": "Configures the session's data visibility to a specific organizational unit in a multi-org environment.",
        "question": "Which procedure sets the Multi-Org access control for a specific operating unit?",
        "options": ["SET_ORG_CONTEXT", "APPS_INITIALIZE.SET_ORG", "MO_GLOBAL.SET_POLICY_CONTEXT"],
        "correctAnswer": "MO_GLOBAL.SET_POLICY_CONTEXT",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "mo_global.set_policy_context('S', l_org_id);"
        }
    },
    {
        "category": "Set Operators",
        "hint": "Combines the result sets of two queries, keeping all rows from both, including any duplicates.",
        "question": "Which set operator is used to concatenate two result sets without removing duplicate rows?",
        "options": ["UNION", "UNION ALL", "MERGE"],
        "correctAnswer": "UNION ALL",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT employee_id FROM sales\nUNION ALL\nSELECT employee_id FROM marketing;"
        }
    },
    {
        "category": "Set Operators",
        "hint": "Combines the result sets of two queries and then removes any duplicate rows.",
        "question": "Which set operator returns a single, duplicate-free result set from two or more SELECT statements?",
        "options": ["UNION", "UNION ALL", "INTERSECT"],
        "correctAnswer": "UNION",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT product_sku FROM catalog_a\nUNION\nSELECT product_sku FROM catalog_b;"
        }
    },
    {
        "category": "Set Operators",
        "hint": "Returns only the rows that are present in both query result sets.",
        "question": "Which set operator is used to find the common rows between two result sets?",
        "options": ["MINUS", "INTERSECT", "COMMON"],
        "correctAnswer": "INTERSECT",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT student_id FROM math_club\nINTERSECT\nSELECT student_id FROM science_club;"
        }
    },
    {
        "category": "Set Operators",
        "hint": "Takes distinct rows from the first query and removes the ones that also appear in the second query.",
        "question": "Which set operator returns rows from the first query that do not exist in the second query?",
        "options": ["MINUS", "DIFFERENCE", "EXCEPT"],
        "correctAnswer": "MINUS",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "SELECT employee_id FROM all_staff\nMINUS\nSELECT employee_id FROM staff_on_leave;"
    }
    },
    {
        "category": "PL/SQL Packages",
        "hint": "A standard Oracle package procedure, commonly used to print output for debugging.",
        "question": "What is the most common procedure used to display messages from a PL/SQL block?",
        "options": ["PRINT_LINE", "DBMS_OUTPUT.PUT_LINE", "CONSOLE.LOG"],
        "correctAnswer": "DBMS_OUTPUT.PUT_LINE",
        "content": {
            "type": "code",
            "language": "sql",
            "value": "BEGIN\n  DBMS_OUTPUT.PUT_LINE('Debug message');\nEND;"
        }
    },
    {
      "category": "Bulk Operations",
      "hint": "This clause allows a `SELECT` statement to retrieve multiple rows into one or more collection variables at once.",
      "question": "Which clause is used with `SELECT ... INTO` to fetch an entire result set into a collection?",
      "options": ["FORALL", "BULK COLLECT", "MULTISET"],
      "correctAnswer": "BULK COLLECT",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT employee_id, last_name\nBULK COLLECT INTO l_emp_ids, l_emp_names\nFROM employees;"
      }
    },
    {
      "category": "Bulk Operations",
      "hint": "This statement is the fastest way to execute a single DML statement (INSERT, UPDATE, DELETE) for every element in a collection.",
      "question": "What is the command for high-performance, iterative DML operations on collections?",
      "options": ["FOR i IN ... LOOP", "FORALL", "EXECUTE IMMEDIATE"],
      "correctAnswer": "FORALL",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "FORALL i IN l_emp_ids.FIRST..l_emp_ids.LAST\n  UPDATE employees SET salary = salary * 1.05\n  WHERE employee_id = l_emp_ids(i);"
      }
    },
    {
      "category": "Bulk Operations",
      "hint": "The main advantage of using bulk operations over traditional loops.",
      "question": "What is the primary performance benefit of using `FORALL` and `BULK COLLECT`?",
      "options": ["They use less memory", "They reduce context switching between SQL and PL/SQL engines", "They are easier to read"],
      "correctAnswer": "They reduce context switching between SQL and PL/SQL engines",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "BEGIN -- Less context switching than a standard FOR loop with individual UPDATEs\n  SELECT employee_id BULK COLLECT INTO l_ids FROM employees;\n  FORALL i IN 1..l_ids.COUNT\n    UPDATE salaries SET amount = amount + 100 WHERE emp_id = l_ids(i);\nEND;"
      }
    },
    {
      "category": "Dynamic SQL",
      "hint": "The primary command in PL/SQL for executing a SQL statement that is constructed as a string at runtime.",
      "question": "Which command is used to execute a SQL string that is not known until runtime?",
      "options": ["RUN SQL", "EXECUTE IMMEDIATE", "PERFORM QUERY"],
      "correctAnswer": "EXECUTE IMMEDIATE",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "l_sql := 'UPDATE employees SET salary = :1 WHERE department_id = :2';\nEXECUTE IMMEDIATE l_sql USING 50000, 10;"
      }
    },
    {
      "category": "Dynamic SQL",
      "hint": "This clause in `EXECUTE IMMEDIATE` is used to pass bind variables into the dynamic SQL string.",
      "question": "When using `EXECUTE IMMEDIATE`, which clause safely passes values into your dynamic query?",
      "options": ["WITH", "INTO", "USING"],
      "correctAnswer": "USING",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "l_sql := 'DELETE FROM logs WHERE log_date < :p_date';\nEXECUTE IMMEDIATE l_sql USING TRUNC(SYSDATE) - 30;"
      }
    },
    {
      "category": "Dynamic SQL",
      "hint": "This clause in `EXECUTE IMMEDIATE` is used to retrieve values from a dynamic query into PL/SQL variables.",
      "question": "To retrieve a value from a dynamic `SELECT` statement, which `EXECUTE IMMEDIATE` clause do you use?",
      "options": ["RETURNING INTO", "BULK COLLECT INTO", "OUT"],
      "correctAnswer": "BULK COLLECT INTO",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "l_sql := 'SELECT last_name FROM employees WHERE employee_id = :1';\nEXECUTE IMMEDIATE l_sql INTO l_last_name USING 100;"
      }
    },
    {
      "category": "Pragmas",
      "hint": "This pragma allows a subprogram to run in its own transaction, which can be committed or rolled back independently of the main transaction.",
      "question": "Which pragma defines a procedure that can commit its work without affecting the main transaction?",
      "options": ["PRAGMA INDEPENDENT", "PRAGMA NEW_TRANSACTION", "PRAGMA AUTONOMOUS_TRANSACTION"],
      "correctAnswer": "PRAGMA AUTONOMOUS_TRANSACTION",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE OR REPLACE PROCEDURE log_error (p_message IN VARCHAR2) IS\n  PRAGMA AUTONOMOUS_TRANSACTION;\nBEGIN\n  INSERT INTO app_logs (msg) VALUES (p_message);\n  COMMIT;\nEND;"
      }
    },
    {
      "category": "Pragmas",
      "hint": "This pragma links a user-defined exception name with a specific Oracle error number.",
      "question": "Which pragma is used to associate a custom exception name with an Oracle error code like -20001?",
      "options": ["PRAGMA EXCEPTION_INIT", "PRAGMA ERROR_CODE", "PRAGMA ASSOCIATE_ERROR"],
      "correctAnswer": "PRAGMA EXCEPTION_INIT",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "DECLARE\n  e_insufficient_funds EXCEPTION;\n  PRAGMA EXCEPTION_INIT(e_insufficient_funds, -20001);\nBEGIN\n  NULL;\nEND;"
      }
    },
    {
      "category": "Pipelined Functions",
      "hint": "This type of function can return rows of a collection iteratively, as if it were a real table.",
      "question": "What kind of function can be queried with `SELECT * FROM TABLE(...)`?",
      "options": ["Aggregate Function", "Scalar Function", "Pipelined Table Function"],
      "correctAnswer": "Pipelined Table Function",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT column_value FROM TABLE(my_pipelined_function(123));"
      }
    },
    {
      "category": "Pipelined Functions",
      "hint": "This command sends a row from a pipelined function back to the calling query.",
      "question": "Inside a pipelined table function, what command do you use to return a row to the caller?",
      "options": ["RETURN ROW", "PIPE ROW", "SEND ROW"],
      "correctAnswer": "PIPE ROW",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "LOOP\n  -- build a record l_rec\n  PIPE ROW(l_rec);\n  EXIT WHEN condition;\nEND LOOP;"
      }
    },
    {
      "category": "Advanced Data Types",
      "hint": "A type of collection that is unbounded and must be initialized before use.",
      "question": "Which collection type is an unbounded list of elements of the same type, defined at the schema level?",
      "options": ["Associative Array", "Nested Table", "Varray"],
      "correctAnswer": "Nested Table",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TYPE list_of_names AS TABLE OF VARCHAR2(100);"
      }
    },
    {
      "category": "Advanced Data Types",
      "hint": "A type of collection that has a fixed upper bound of elements.",
      "question": "Which collection type is a fixed-size array of elements of the same type?",
      "options": ["Record", "Varray", "Nested Table"],
      "correctAnswer": "Varray",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TYPE phone_numbers_varray AS VARRAY(5) OF VARCHAR2(20);"
      }
    },
    {
      "category": "Analytic Functions",
      "hint": "This analytic function assigns a unique, sequential integer to each row in a partition.",
      "question": "Which function would you use to number rows 1, 2, 3, ... within each department, ordered by salary?",
      "options": ["RANK()", "ROW_NUMBER()", "COUNT()"],
      "correctAnswer": "ROW_NUMBER()",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT last_name, ROW_NUMBER() OVER (PARTITION BY department_id ORDER BY salary DESC) as rn FROM employees;"
      }
    },
    {
      "category": "Analytic Functions",
      "hint": "This analytic function assigns a rank to each row, with gaps in the ranking for ties.",
      "question": "If two employees have the same salary, which function will give them the same rank and cause a gap in the sequence (e.g., 1, 2, 2, 4)?",
      "options": ["ROW_NUMBER()", "DENSE_RANK()", "RANK()"],
      "correctAnswer": "RANK()",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT last_name, RANK() OVER (ORDER BY salary DESC) as rank_val FROM employees;"
      }
    },
    {
      "category": "Analytic Functions",
      "hint": "Allows you to access data from a subsequent row in the result set without a self-join.",
      "question": "Which analytic function lets you access the value of the 'next' row?",
      "options": ["NEXT()", "LEAD()", "LAG()"],
      "correctAnswer": "LEAD()",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT last_name, salary, LEAD(salary, 1, 0) OVER (ORDER BY salary DESC) as next_salary FROM employees;"
      }
    },
    {
      "category": "Analytic Functions",
      "hint": "Allows you to access data from a previous row in the result set without a self-join.",
      "question": "Which analytic function lets you access the value of the 'previous' row?",
      "options": ["PREVIOUS()", "PRIOR()", "LAG()"],
      "correctAnswer": "LAG()",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "SELECT last_name, hire_date, LAG(hire_date, 1) OVER (ORDER BY hire_date) as prev_hire_date FROM employees;"
      }
    },
    {
      "category": "Object-Oriented PL/SQL",
      "hint": "The fundamental building block for object-oriented programming in Oracle.",
      "question": "What is the PL/SQL equivalent of a 'class' in other languages, used to define object blueprints?",
      "options": ["PACKAGE", "OBJECT TYPE", "RECORD TYPE"],
      "correctAnswer": "OBJECT TYPE",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TYPE Person_obj AS OBJECT (\n  idno   NUMBER,\n  name   VARCHAR2(30),\n  MEMBER FUNCTION display RETURN VARCHAR2\n);"
      }
    },
    {
      "category": "Object-Oriented PL/SQL",
      "hint": "The implementation code for the methods of an object type.",
      "question": "Where do you define the code for the methods of an `OBJECT TYPE`?",
      "options": ["In a Package", "In an Object Type Body", "In a Trigger"],
      "correctAnswer": "In an Object Type Body",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TYPE BODY Person_obj IS\n  MEMBER FUNCTION display RETURN VARCHAR2 IS\n  BEGIN\n    RETURN 'ID: ' || self.idno;\n  END;\nEND;"
      }
    },
    {
      "category": "Object-Oriented PL/SQL",
      "hint": "The keyword used within a member method to refer to the current instance of the object.",
      "question": "Inside an object type's member method, which keyword refers to the instance of the object itself?",
      "options": ["THIS", "ME", "SELF"],
      "correctAnswer": "SELF",
      "content": {
        "type": "code",
        "language": "sql",
        "value": "CREATE TYPE BODY Person_obj IS\n  MEMBER PROCEDURE set_name(p_name VARCHAR2) IS\n  BEGIN\n    SELF.name := p_name;\n  END;\nEND;"
      }
    },

    {
    "category": "Core Systems",
    "hint": "A middleware framework inside EBS for exposing business logic.",
    "question": "What is the primary role of the Integrated SOA Gateway (ISG)?",
    "options": [
      "To run the Oracle Database",
      "To serve as a secure entry point for web services",
      "To manage user interface themes"
    ],
    "correctAnswer": "To serve as a secure entry point for web services",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Core Systems",
    "hint": "The fundamental structure of an EBS environment.",
    "question": "On which of the three tiers of the EBS architecture does the ISG framework run?",
    "options": [
      "Database Tier",
      "Desktop Tier",
      "Application Tier"
    ],
    "correctAnswer": "Application Tier",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Core Systems",
    "hint": "An internal, searchable catalog within EBS.",
    "question": "What is the name of the central registry where all deployed ISG services are discoverable?",
    "options": [
      "The Service Hub",
      "The Integration Repository",
      "The API Gateway"
    ],
    "correctAnswer": "The Integration Repository",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "The fundamental unit for organizing code in the Oracle Database.",
    "question": "A PL/SQL package consists of which two parts?",
    "options": [
      "Header and Footer",
      "Specification and Body",
      "Public and Private Blocks"
    ],
    "correctAnswer": "Specification and Body",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This part of a package acts as the public 'contract' or interface.",
    "question": "Which part of a PL/SQL package is read by the ISG parser to find services to deploy?",
    "options": [
      "Package Specification (.pks)",
      "Package Body (.pkb)",
      "Package Trigger"
    ],
    "correctAnswer": "Package Specification (.pks)",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "-- The ISG parser reads this file\nPACKAGE company_api IS\n  PROCEDURE hire_employee(p_name IN VARCHAR2);\nEND company_api;"
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This part of a package contains the actual implementation and private logic.",
    "question": "Where is the detailed PL/SQL code for a procedure's business logic located?",
    "options": [
      "In the Package Specification",
      "In the Integration Repository",
      "In the Package Body"
    ],
    "correctAnswer": "In the Package Body",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "PACKAGE BODY company_api IS\n  PROCEDURE hire_employee(p_name IN VARCHAR2) IS\n  BEGIN\n    INSERT INTO employees (name) VALUES (p_name);\n  END hire_employee;\nEND company_api;"
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "The best-practice method for a PL/SQL procedure to return a tabular dataset via ISG.",
    "question": "To return multiple rows of data from a REST service, what is the officially supported OUT parameter data type?",
    "options": [
      "SYS_REFCURSOR",
      "TABLE OF RECORD",
      "CLOB"
    ],
    "correctAnswer": "SYS_REFCURSOR",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "PROCEDURE get_all_employees (\n  p_employee_data OUT SYS_REFCURSOR\n);"
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "A composite PL/SQL data type that is not officially supported by ISG for REST parameters.",
    "question": "What is the risk of using a `TABLE OF RECORD` as an OUT parameter in an ISG REST service?",
    "options": [
      "It is a documented best practice",
      "It may break in future Oracle patches",
      "It performs better than a SYS_REFCURSOR"
    ],
    "correctAnswer": "It may break in future Oracle patches",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This parameter mode defines data sent from the client to the EBS procedure.",
    "question": "If a mobile app needs to send a `user_id` to a PL/SQL procedure, what parameter mode should be used?",
    "options": [
      "IN",
      "OUT",
      "IN OUT"
    ],
    "correctAnswer": "IN",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "PROCEDURE get_user_details (\n  p_user_id IN NUMBER\n);"
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This parameter mode defines data sent from the EBS procedure back to the client.",
    "question": "If a PL/SQL procedure needs to return a status message to the mobile app, what parameter mode should be used?",
    "options": [
      "IN",
      "OUT",
      "IN OUT"
    ],
    "correctAnswer": "OUT",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "PROCEDURE create_user (\n  p_status_message OUT VARCHAR2\n);"
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "Specially formatted PL/SQL comments that provide metadata to the ISG parser.",
    "question": "What is the purpose of an Annotation, enclosed in `/*# ... */`, in a PL/SQL package specification?",
    "options": [
      "They are regular comments ignored by all tools",
      "They provide instructions to ISG on how to create a web service",
      "They are used for runtime debugging only"
    ],
    "correctAnswer": "They provide instructions to ISG on how to create a web service",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "/*# @rep:scope public */\nPROCEDURE my_public_procedure;"
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "This annotation tag marks a procedure as intended for public exposure.",
    "question": "Which annotation tag is required to make a procedure visible to the ISG deployment process?",
    "options": [
      "@rep:displayname",
      "@rep:scope public",
      "@rep:param"
    ],
    "correctAnswer": "@rep:scope public",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "This annotation tag defines the properties of a procedure's arguments for the web service.",
    "question": "What is the `@param` tag used for in an ISG annotation?",
    "options": [
      "To set a package-level variable",
      "To describe a parameter's direction (IN/OUT) and data type",
      "To define the display name of the service"
    ],
    "correctAnswer": "To describe a parameter's direction (IN/OUT) and data type",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "/*# @param P_USER_ID The unique identifier for the user. */\nPROCEDURE get_user(P_USER_ID IN NUMBER);"
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "The first step in deployment, where a tool reads the package specification file.",
    "question": "What is the main function of the `irep_parser.pl` tool?",
    "options": [
      "It deploys the service to the web server",
      "It compiles the package body",
      "It scans for annotations and generates a metadata file (.ildt)"
    ],
    "correctAnswer": "It scans for annotations and generates a metadata file (.ildt)",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "The second step, which uses the output from the parser.",
    "question": "What does the `FNDLOAD` utility do in the ISG deployment process?",
    "options": [
      "It loads the generated .ildt file into the Integration Repository",
      "It loads data from a flat file into a custom table",
      "It parses the package specification for errors"
    ],
    "correctAnswer": "It loads the generated .ildt file into the Integration Repository",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "The final administrative step, performed in the EBS user interface.",
    "question": "After parsing and loading, what is the final step to make a service live and accessible?",
    "options": [
      "Recompile the package",
      "Restart the database",
      "Click 'Deploy' on the service within the Integration Repository UI"
    ],
    "correctAnswer": "Click 'Deploy' on the service within the Integration Repository UI",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Execution Concepts",
    "hint": "The process of converting PL/SQL OUT parameters into a JSON string.",
    "question": "When ISG converts a SYS_REFCURSOR into a JSON array for a mobile app, what is this process called?",
    "options": [
      "Deserialization",
      "Compilation",
      "Serialization"
    ],
    "correctAnswer": "Serialization",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Execution Concepts",
    "hint": "The process of converting a JSON object from a client request into PL/SQL data types.",
    "question": "When a mobile app sends a JSON object in a POST request, what does the ISG engine do?",
    "options": [
      "It serializes the JSON into a string",
      "It deserializes the JSON into PL/SQL parameters",
      "It stores the raw JSON in a log file"
    ],
    "correctAnswer": "It deserializes the JSON into PL/SQL parameters",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Execution Concepts",
    "hint": "The final, public-facing URL used to invoke a specific procedure.",
    "question": "What is an 'Endpoint' in the context of ISG?",
    "options": [
      "A private database link",
      "The URL that a client application calls to run the service",
      "A database connection string"
    ],
    "correctAnswer": "The URL that a client application calls to run the service",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "-- Example Endpoint URL\nhttps://yourserver.com/OA_HTML/rest/api/v1/mobile/get_products"
    }
  },
  {
    "category": "Troubleshooting",
    "hint": "An error that prevents a service from being successfully registered in ISG.",
    "question": "A missing or syntactically incorrect annotation block will cause what type of error?",
    "options": [
      "A Runtime Error",
      "A Deployment-Time Error",
      "A Network Timeout Error"
    ],
    "correctAnswer": "A Deployment-Time Error",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Troubleshooting",
    "hint": "An error that occurs only when a live, deployed service is called.",
    "question": "A bug in the package body's logic, such as a 'no data found' exception, is what type of error?",
    "options": [
      "Runtime Error",
      "Deployment-Time Error",
      "Parsing Error"
    ],
    "correctAnswer": "Runtime Error",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Development Concepts",
    "hint": "The implied future cost of choosing an easy solution now over a more robust one.",
    "question": "What kind of risk is a developer taking by using the undocumented serialization of a `TABLE OF RECORD`?",
    "options": [
      "No risk, as it is a common practice",
      "A performance improvement",
      "Incurring technical debt"
    ],
    "correctAnswer": "Incurring technical debt",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Core Systems",
    "hint": "This is a comprehensive suite of integrated global business applications from Oracle.",
    "question": "What is Oracle E-Business Suite (EBS)?",
    "options": [
      "A single application for Human Resources only",
      "A suite of applications for core business functions like Finance and SCM",
      "A type of Oracle Database"
    ],
    "correctAnswer": "A suite of applications for core business functions like Finance and SCM",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Core Systems",
    "hint": "This tier in the EBS architecture is where all business data is stored.",
    "question": "What is the primary role of the Database Tier in the EBS three-tier architecture?",
    "options": [
      "To run the business logic",
      "To store all business data in the Oracle Database",
      "To serve web pages to the end-user"
    ],
    "correctAnswer": "To store all business data in the Oracle Database",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This is Oracle's proprietary procedural extension to SQL.",
    "question": "What language is primarily used to write business logic, stored procedures, and triggers inside the Oracle Database?",
    "options": [
      "Java",
      "PL/SQL",
      "T-SQL"
    ],
    "correctAnswer": "PL/SQL",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "PL/SQL Objects",
    "hint": "This parameter mode is used for a value that is sent by the client, modified, and then returned.",
    "question": "A procedure needs to increment a counter sent by a client and return the new value. Which parameter mode should be used?",
    "options": [
      "IN",
      "OUT",
      "IN OUT"
    ],
    "correctAnswer": "IN OUT",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "PROCEDURE increment_counter(\n  p_counter IN OUT NUMBER\n) IS\nBEGIN\n  p_counter := p_counter + 1;\nEND;"
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "This annotation tag sets a user-friendly name for the service in the repository.",
    "question": "Which annotation allows a developer to set a clean, readable name like 'Get User Roles' for a service?",
    "options": [
      "@rep:scope",
      "@rep:param",
      "@rep:displayname"
    ],
    "correctAnswer": "@rep:displayname",
    "content": {
      "type": "code",
      "language": "sql",
      "value": "/*# @rep:displayname \"Get User Roles\" */"
    }
  },
  {
    "category": "ISG Deployment",
    "hint": "This is what happens when the parser encounters a public procedure without a valid annotation.",
    "question": "What is the consequence of a missing annotation block for a public procedure during the parsing step?",
    "options": [
      "The procedure is deployed with default settings",
      "It is a fatal error that stops the deployment process for that procedure",
      "A warning is logged, but the deployment continues"
    ],
    "correctAnswer": "It is a fatal error that stops the deployment process for that procedure",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Execution Concepts",
    "hint": "This is how ISG transforms a SYS_REFCURSOR for a JSON response.",
    "question": "How does ISG typically serialize a SYS_REFCURSOR?",
    "options": [
      "Into a single string with comma-separated values",
      "Into a nested JSON object with metadata",
      "Into a clean, flat JSON array of objects"
    ],
    "correctAnswer": "Into a clean, flat JSON array of objects",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {
    "category": "Troubleshooting",
    "hint": "This is a common runtime error when the ISG engine fails to execute a service.",
    "question": "What common error might indicate a problem in the package body logic or a data issue at runtime?",
    "options": [
      "ISG_SERVICE_EXECUTION_ERROR",
      "IREP_PARSER_FAILURE",
      "FNDLOAD_MISSING_FILE"
    ],
    "correctAnswer": "ISG_SERVICE_EXECUTION_ERROR",
    "content": {
      "type": "none",
      "language": "none",
      "value": ""
    }
  },
  {

    "category": "PL/SQL Fundamentals",

    "hint": "A container for organizing related procedures, functions, and variables.",

    "question": "In PL/SQL, what is the primary purpose of a 'package'?",

    "options": [

      "To store a single large table's data",

      "To group related program units into a single database object",

      "To define user permissions for an application"

    ],

    "correctAnswer": "To group related program units into a single database object",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "PL/SQL Fundamentals",

    "hint": "This is the public interface or 'contract' of a package.",

    "question": "Which part of a PL/SQL package declares the public elements that can be called by other programs?",

    "options": [

      "Package Body",

      "Package Specification",

      "Package Header"

    ],

    "correctAnswer": "Package Specification",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "-- This is the Specification. It defines WHAT can be called.\nPACKAGE user_utils IS\n  PROCEDURE create_user(p_username IN VARCHAR2);\n  FUNCTION is_active(p_user_id IN NUMBER) RETURN BOOLEAN;\nEND user_utils;"

    }

  },

  {

    "category": "PL/SQL Fundamentals",

    "hint": "This contains the detailed implementation and private logic.",

    "question": "Which part of a PL/SQL package contains the actual code that executes when a procedure is called?",

    "options": [

      "Package Specification",

      "Anonymous Block",

      "Package Body"

    ],

    "correctAnswer": "Package Body",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "-- This is the Body. It defines HOW the procedures work.\nPACKAGE BODY user_utils IS\n  PROCEDURE create_user(p_username IN VARCHAR2) IS\n  BEGIN\n    -- Implementation code goes here...\n    NULL;\n  END create_user;\n\n  FUNCTION is_active(p_user_id IN NUMBER) RETURN BOOLEAN IS\n  BEGIN\n    RETURN TRUE; -- Logic to check status...\n  END is_active;\nEND user_utils;"

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "The process of analyzing text to understand its structure and meaning.",

    "question": "In the context of ISG, what does 'parsing' a package specification mean?",

    "options": [

      "Executing the PL/SQL code",

      "Reading the file to find annotations and validate its syntax",

      "Encrypting the package contents"

    ],

    "correctAnswer": "Reading the file to find annotations and validate its syntax",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "They define the direction of data flow for a service's arguments.",

    "question": "What is the general purpose of parameters (IN, OUT, IN OUT) in an ISG service?",

    "options": [

      "To control the version of the service",

      "To define the flow of data between the client and the server",

      "To set database configuration values"

    ],

    "correctAnswer": "To define the flow of data between the client and the server",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "-- IN: Data flows IN to the server.\n-- OUT: Data flows OUT from the server.\nPROCEDURE example_proc(\n  p_input  IN  VARCHAR2,\n  p_output OUT NUMBER\n);"

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "A public-facing URL that a client application uses to invoke a procedure.",

    "question": "What is the 'endpoint' that ISG generates for a deployed service?",

    "options": [

      "A database connection string",

      "A URL that exposes the PL/SQL procedure over the web",

      "A local file path to the package"

    ],

    "correctAnswer": "A URL that exposes the PL/SQL procedure over the web",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "These are the instructions that tell ISG how to create a web service.",

    "question": "What is the fundamental role of 'annotations' in the ISG deployment process?",

    "options": [

      "They are comments for other developers and are ignored by ISG",

      "They are metadata that guides the web service creation",

      "They are commands that execute at runtime"

    ],

    "correctAnswer": "They are metadata that guides the web service creation",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "/*# @rep:scope public @rep:displayname \"Get All Products\" */\n-- The comment above is metadata, not just a comment."

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "This is a central catalog within EBS for all available integration points.",

    "question": "Once a service is loaded via FNDLOAD, where does its definition reside, making it ready for deployment?",

    "options": [

      "In the Application Server's memory",

      "In the Oracle Integration Repository",

      "In a temporary file on the server"

    ],

    "correctAnswer": "In the Oracle Integration Repository",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "The process of converting database data (like a cursor) into a format like JSON.",

    "question": "What is 'serialization' in the context of an ISG REST service returning data?",

    "options": [

      "Running database queries in a specific sequence",

      "Converting native Oracle data types into a web-friendly format",

      "Validating user input before processing"

    ],

    "correctAnswer": "Converting native Oracle data types into a web-friendly format",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "ISG Concepts",

    "hint": "The process of converting a format like JSON from a request into Oracle data types.",

    "question": "When ISG receives a JSON object in a client request, what is 'deserialization'?",

    "options": [

      "Converting the JSON into native PL/SQL types for the procedure parameters",

      "Logging the raw JSON request to a file",

      "Sending the JSON response back to the client"

    ],

    "correctAnswer": "Converting the JSON into native PL/SQL types for the procedure parameters",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "General Concepts",

    "hint": "This is a system that enables different software applications to communicate with each other.",

    "question": "ISG acts as what kind of software component between Oracle EBS and external systems?",

    "options": [

      "A database driver",

      "A middleware framework",

      "An operating system"

    ],

    "correctAnswer": "A middleware framework",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "General Concepts",

    "hint": "A pointer to a query's result set.",

    "question": "In general terms, what is a 'cursor' in a database context?",

    "options": [

      "The blinking text symbol in a text editor",

      "A memory area that holds a SQL statement and its result set",

      "A user's mouse pointer"

    ],

    "correctAnswer": "A memory area that holds a SQL statement and its result set",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "DECLARE\n  -- l_cursor is a pointer to the result set of the query\n  CURSOR l_cursor IS SELECT employee_name FROM employees;\nBEGIN\n  NULL;\nEND;"

    }

  },

  {

    "category": "General Concepts",

    "hint": "The architectural principle of hiding implementation details.",

    "question": "How do PL/SQL packages support 'encapsulation'?",

    "options": [

      "By allowing the package body (implementation) to be hidden from the user",

      "By encrypting the data automatically",

      "By combining all code into a single file"

    ],

    "correctAnswer": "By allowing the package body (implementation) to be hidden from the user",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "General Concepts",

    "hint": "A type of error that prevents the application from being built or deployed.",

    "question": "A 'Deployment-Time Error' is best described as what?",

    "options": [

      "An error that happens when a user is interacting with the live application",

      "An error in the business logic that produces a wrong result",

      "An error during the setup or installation process that prevents it from completing"

    ],

    "correctAnswer": "An error during the setup or installation process that prevents it from completing",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "General Concepts",

    "hint": "A type of error that occurs while the application is in use.",

    "question": "A 'Runtime Error' is best described as what?",

    "options": [

      "A syntax error in the source code",

      "An error that happens after deployment, when the application is being used",

      "An error that prevents the code from being compiled"

    ],

    "correctAnswer": "An error that happens after deployment, when the application is being used",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "PL/SQL Fundamentals",

    "hint": "A structured data type that can hold a set of related fields.",

    "question": "In PL/SQL, what is a 'RECORD' type used for?",

    "options": [

      "To store a single value like a number or string",

      "To group several related data items together as a single unit",

      "To define a database table"

    ],

    "correctAnswer": "To group several related data items together as a single unit",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "DECLARE\n  TYPE t_employee_rec IS RECORD (\n    id         employees.employee_id%TYPE,\n    first_name employees.first_name%TYPE,\n    last_name  employees.last_name%TYPE\n  );\n  l_employee t_employee_rec;\nBEGIN\n  l_employee.id := 100;\nEND;"

    }

  },

  {

    "category": "PL/SQL Fundamentals",

    "hint": "A data type used for storing large blocks of character data.",

    "question": "Which PL/SQL data type is most suitable for storing a very long text string, like a JSON payload?",

    "options": [

      "VARCHAR2",

      "NUMBER",

      "CLOB"

    ],

    "correctAnswer": "CLOB",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "DECLARE\n  l_json_data CLOB;\nBEGIN\n  l_json_data := '{\"id\": 1, \"data\": \"...very large amount of text...\"}';\nEND;"

    }

  },

  {

    "category": "ISG Security",

    "hint": "Permissions must be managed for a service to be usable.",

    "question": "After an ISG service is deployed, who can use it?",

    "options": [

      "Anyone on the internet, by default",

      "Only users and responsibilities that have been granted specific permissions",

      "Only the database administrator"

    ],

    "correctAnswer": "Only users and responsibilities that have been granted specific permissions",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "General Concepts",

    "hint": "A set of rules for how two systems should communicate.",

    "question": "In web services, what is an 'interface'?",

    "options": [

      "The graphical user interface (GUI)",

      "A contract that defines how a client should interact with a service",

      "The physical network connection"

    ],

    "correctAnswer": "A contract that defines how a client should interact with a service",

    "content": {

      "type": "none",

      "language": "none",

      "value": ""

    }

  },

  {

    "category": "PL/SQL Fundamentals",

    "hint": "This is a primary benefit of grouping related logic into a single database object.",

    "question": "What is a major performance benefit of using PL/SQL packages?",

    "options": [

      "They use less disk space than individual procedures",

      "The entire package is loaded into memory on the first call",

      "They automatically create indexes on tables"

    ],

    "correctAnswer": "The entire package is loaded into memory on the first call",

    "content": {

      "type": "code",

      "language": "sql",

      "value": "BEGIN\n  -- First call to my_package loads the whole thing into memory.\n  my_package.proc1(); \n\n  -- Subsequent calls are faster as it's already in memory.\n  my_package.proc2(); \nEND;"

    }

  }

  ]
}