{
  "id": "shell_deck",
  "name": "Bash & Shell Build Automation",
  "description": "Master essential Bash commands and shell scripting for build automation. This deck focuses on mobile development, covering concepts for Android (Gradle) and iOS (xcodebuild), from basic scripts to advanced command-line tools for CI/CD pipelines.",
  "deckType": "multipleChoice", 
  "isAiGenerated": false,
  "language": "bash",
  "cards": [
    {
      "cardId": "shell_001",
      "category": "Shell Scripting",
      "hint": "This is the very first line of a shell script, known as the 'shebang'.",
      "question": "What is the purpose of the `#!/bin/bash` line in a script?",
      "options": [
        "It's a comment for the author",
        "It tells the OS which interpreter to use",
        "It imports a library named 'bash'"
      ],
      "correctAnswer": "It tells the OS which interpreter to use",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "#!/bin/bash\n\necho \"Hello from the script!\""
      }
    },
    {
      "cardId": "shell_002",
      "category": "Shell Scripting",
      "hint": "This command is required to give a script file permission to be run as a program.",
      "question": "Which command is needed to make a script executable?",
      "options": [
        "make runnable script.sh",
        "run script.sh",
        "chmod +x script.sh"
      ],
      "correctAnswer": "chmod +x script.sh",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# First, give the script execution permissions.\nchmod +x deploy.sh\n\n# Now, you can run it.\n./deploy.sh"
      }
    },
    {
      "cardId": "shell_003",
      "category": "Shell Scripting",
      "hint": "This practice prevents word splitting and issues with filenames containing spaces.",
      "question": "Why is it crucial to quote variables like `\"$FILENAME\"`?",
      "options": [
        "It makes the variable a different color.",
        "It prevents errors if the value contains spaces.",
        "It's required for variables to be used."
      ],
      "correctAnswer": "It prevents errors if the value contains spaces.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "FILENAME=\"My Report.docx\"\n\n# This works correctly because of the quotes.\ncp \"$FILENAME\" /backups/"
      }
    },
    {
      "cardId": "shell_004",
      "category": "Shell Scripting",
      "hint": "This shell option causes a script to exit immediately if a command exits with a non-zero status.",
      "question": "What is the purpose of `set -e` at the top of a shell script?",
      "options": [
        "It enables verbose logging for every command.",
        "It stops the script on the first error.",
        "It encrypts the script's variables."
      ],
      "correctAnswer": "It stops the script on the first error.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This script will exit after the 'mkdir' fails.\nset -e\n\nmkdir /root/new_dir # This will fail\necho \"This message will not be displayed.\""
      }
    },
    {
      "cardId": "shell_005",
      "category": "Shell Scripting",
      "hint": "This special variable holds the exit status of the most recently executed command.",
      "question": "Which special variable would you check to see if the previous command was successful?",
      "options": [
        "$STATUS",
        "$#",
        "$?"
      ],
      "correctAnswer": "$?",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "grep \"error\" log.txt\n\nif [ $? -ne 0 ]; then\n  echo \"No errors found.\"\nfi"
      }
    },
    {
      "cardId": "shell_006",
      "category": "Shell Scripting",
      "hint": "This conditional test checks if a given path exists and is a directory.",
      "question": "What does the `[ -d \"/path/to/dir\" ]` test check for?",
      "options": [
        "If the directory is empty.",
        "If the path exists and is a directory.",
        "If the directory is deletable."
      ],
      "correctAnswer": "If the path exists and is a directory.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "BUILD_DIR=\"./build\"\n\nif [ ! -d \"$BUILD_DIR\" ]; then\n  mkdir \"$BUILD_DIR\"\nfi"
      }
    },
    {
      "cardId": "shell_007",
      "category": "Shell Scripting",
      "hint": "This syntax is used to redirect one file descriptor to another, often for combining output streams.",
      "question": "What is the purpose of `2>&1` in a command?",
      "options": [
        "It runs the command twice.",
        "It redirects standard error to standard output.",
        "It limits the command's output to 2 lines."
      ],
      "correctAnswer": "It redirects standard error to standard output.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This sends both normal and error messages to log.txt\n./run_build.sh > log.txt 2>&1"
      }
    },
    {
      "cardId": "shell_008",
      "category": "Shell Scripting",
      "hint": "This structure is used to repeatedly execute a block of code for each item in a list.",
      "question": "Which loop structure is ideal for iterating over a list of files?",
      "options": [
        "while-do",
        "if-then",
        "for-in"
      ],
      "correctAnswer": "for-in",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "for FILENAME in *.txt; do\n  echo \"Processing $FILENAME...\"\ndone"
      }
    },
    {
      "cardId": "shell_009",
      "category": "Shell Scripting",
      "hint": "This command allows a script to get input directly from the user.",
      "question": "Which command pauses a script and waits for user input?",
      "options": [
        "input",
        "get",
        "read"
      ],
      "correctAnswer": "read",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "echo \"What is your name?\"\nread USER_NAME\necho \"Hello, $USER_NAME\""
      }
    },
    {
      "cardId": "shell_010",
      "category": "Shell Scripting",
      "hint": "This command is a powerful tool for finding files or directories based on criteria like name, size, or type.",
      "question": "How would you find all `.log` files in the current directory and its subdirectories?",
      "options": [
        "grep .log .",
        "ls *.log",
        "find . -name \"*.log\""
      ],
      "correctAnswer": "find . -name \"*.log\"",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This command is very useful for cleanup scripts.\nfind . -name \"*.tmp\" -type f -delete"
      }
    },
    {
      "cardId": "shell_011",
      "category": "Shell Scripting",
      "hint": "This special variable represents all positional parameters as a single string.",
      "question": "What does the special variable `$*` represent?",
      "options": [
        "The script's name",
        "The number of arguments",
        "All arguments as one string"
      ],
      "correctAnswer": "All arguments as one string",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# If run as ./script.sh arg1 \"arg 2\"\n# This will print: arg1 arg 2\nfor arg in \"$*\"; do echo \"$arg\"; done"
      }
    },
    {
      "cardId": "shell_012",
      "category": "Shell Scripting",
      "hint": "This special variable represents all positional parameters as separate, quoted strings.",
      "question": "What is the key difference of using `\"$@\"` to loop over arguments?",
      "options": [
        "It's faster than `$*`",
        "It treats each argument as a separate word",
        "It combines all arguments into one"
      ],
      "correctAnswer": "It treats each argument as a separate word",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# If run as ./script.sh arg1 \"arg 2\"\n# This will print 'arg1' and 'arg 2' on separate lines.\nfor arg in \"$@\"; do echo \"$arg\"; done"
      }
    },
    {
      "cardId": "shell_013",
      "category": "Shell Scripting",
      "hint": "This stream editor command is used to perform text substitution on a file or stream.",
      "question": "What `sed` command would you use to replace all instances of 'api_key' with 'REDACTED' in a file?",
      "options": [
        "sed 'replace/api_key/REDACTED/' config.txt",
        "sed 's/api_key/REDACTED/g' config.txt",
        "sed 'change/api_key/REDACTED/all' config.txt"
      ],
      "correctAnswer": "sed 's/api_key/REDACTED/g' config.txt",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Replaces 'v1.0' with 'v2.0' in a config file.\nsed -i 's/version=\"1.0\"/version=\"2.0\"/g' config.xml"
      }
    },
    {
      "cardId": "shell_014",
      "category": "Build Process",
      "hint": "This command is used to pass compile-time configuration from the `flutter build` command to the Dart code.",
      "question": "How can you pass a custom variable from the command line into your Flutter app at build time?",
      "options": [
        "Using `--set-variable`",
        "Using `--dart-define`",
        "Using `--build-arg`"
      ],
      "correctAnswer": "Using `--dart-define`",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This variable can be accessed in Dart code.\nflutter build apk --dart-define=API_URL=https://prod.api"
      }
    },
    {
      "cardId": "shell_015",
      "category": "Build Process",
      "hint": "This command fetches all the dependencies listed in the `pubspec.yaml` file.",
      "question": "What is the function of the `flutter pub get` command?",
      "options": [
        "It compiles the Flutter application.",
        "It downloads the project's dependencies.",
        "It gets the latest version of Flutter."
      ],
      "correctAnswer": "It downloads the project's dependencies.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Run this command after editing pubspec.yaml\nflutter pub get"
      }
    },
    {
      "cardId": "shell_016",
      "category": "Build Process",
      "hint": "This command removes temporary and build-related files, ensuring a clean state before a new build.",
      "question": "What is the primary purpose of running `flutter clean`?",
      "options": [
        "It uninstalls the app from a device.",
        "It deletes the Flutter SDK.",
        "It removes build artifacts to resolve build issues."
      ],
      "correctAnswer": "It removes build artifacts to resolve build issues.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Often used when builds are failing unexpectedly.\nflutter clean && flutter pub get"
      }
    },
    {
      "cardId": "shell_017",
      "category": "Build Process",
      "hint": "This file is auto-generated and lists the exact versions of every dependency, ensuring consistent builds.",
      "question": "What is the role of the `pubspec.lock` file?",
      "options": [
        "It prevents changes to `pubspec.yaml`",
        "It's a backup of your dependencies",
        "It locks dependency versions for consistency"
      ],
      "correctAnswer": "It locks dependency versions for consistency",
      "content": {
        "type": "code",
        "language": "yaml",
        "value": "# In pubspec.lock (auto-generated)\npackages:\n  http:\n    version: \"1.2.1\"\n    description:\n      name: http"
      }
    },
    {
      "cardId": "shell_018",
      "category": "Build Process",
      "hint": "These parameters allow you to set the public-facing version and the internal tracking number for your app.",
      "question": "What is the difference between `--build-name` and `--build-number` in `flutter build`?",
      "options": [
        "They are aliases for the same thing",
        "Name is for Android, Number is for iOS",
        "Name is the version string, Number is an integer counter"
      ],
      "correctAnswer": "Name is the version string, Number is an integer counter",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "flutter build apk \\\n  --build-name=1.0.5 \\\n  --build-number=17"
      }
    },
    {
      "cardId": "shell_019",
      "category": "Android Compilation",
      "hint": "This script, included in the project, ensures a consistent Gradle version is used for builds.",
      "question": "What is the main advantage of using `./gradlew` (Gradle Wrapper)?",
      "options": [
        "It's faster than the regular `gradle` command.",
        "It guarantees a consistent build environment.",
        "It only works for release builds."
      ],
      "correctAnswer": "It guarantees a consistent build environment.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "cd android\n\n# This uses the project-defined Gradle version.\n./gradlew assembleRelease"
      }
    },
    {
      "cardId": "shell_020",
      "category": "Android Compilation",
      "hint": "These are variants of your app, such as 'debug' and 'release', defined in the `build.gradle` file.",
      "question": "In Gradle, what is the role of `buildTypes`?",
      "options": [
        "To define different CPU architectures.",
        "To define different versions of the app.",
        "To define build configurations like signing."
      ],
      "correctAnswer": "To define build configurations like signing.",
      "content": {
        "type": "code",
        "language": "groovy",
        "value": "// In android/app/build.gradle\nandroid {\n  buildTypes {\n    release {\n      minifyEnabled true\n      signingConfig signingConfigs.release\n    }\n  }\n}"
      }
    },
    {
      "cardId": "shell_021",
      "category": "Android Compilation",
      "hint": "These allow you to create different versions of your app from the same codebase, e.g., free and paid.",
      "question": "What is a `productFlavor` in a `build.gradle` file used for?",
      "options": [
        "Setting the Android SDK version",
        "Creating variants of your app (e.g., demo, full)",
        "Configuring testing libraries"
      ],
      "correctAnswer": "Creating variants of your app (e.g., demo, full)",
      "content": {
        "type": "code",
        "language": "groovy",
        "value": "android {\n  flavorDimensions \"version\"\n  productFlavors {\n    demo {\n      applicationIdSuffix \".demo\"\n    }\n    full {\n      applicationIdSuffix \".full\"\n    }\n  }\n}"
      }
    },
    {
      "cardId": "shell_022",
      "category": "Android Compilation",
      "hint": "This gradle task is useful for getting the SHA-1 and other signature hashes needed for external APIs.",
      "question": "Which Gradle task displays the cryptographic hashes of your app's signing key?",
      "options": [
        "./gradlew getHashes",
        "./gradlew signingReport",
        "./gradlew showKeys"
      ],
      "correctAnswer": "./gradlew signingReport",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "cd android\n\n# Run this to get the SHA-1 for services like Firebase.\n./gradlew signingReport"
      }
    },
    {
      "cardId": "shell_023",
      "category": "Android Compilation",
      "hint": "This specifies the Android API level that your app is designed and tested for.",
      "question": "What is the purpose of the `targetSdkVersion` in `build.gradle`?",
      "options": [
        "The minimum OS version required to run the app",
        "The API level the app was tested against",
        "The API level used to compile the app"
      ],
      "correctAnswer": "The API level the app was tested against",
      "content": {
        "type": "code",
        "language": "groovy",
        "value": "android {\n  defaultConfig {\n    minSdkVersion 21\n    targetSdkVersion 33\n  }\n}"
      }
    },
    {
      "cardId": "shell_024",
      "category": "Android Compilation",
      "hint": "This specifies the oldest Android version your app can run on.",
      "question": "What does `minSdkVersion` define for your app?",
      "options": [
        "The recommended Android version",
        "The only version it can be installed on",
        "The minimum required Android version"
      ],
      "correctAnswer": "The minimum required Android version",
      "content": {
        "type": "code",
        "language": "groovy",
        "value": "// This app will not install on devices older than Lollipop.\nandroid {\n  defaultConfig {\n    minSdkVersion 21\n  }\n}"
      }
    },
    {
      "cardId": "shell_025",
      "category": "iOS Compilation",
      "hint": "This command line tool is part of Xcode and is used to perform builds, tests, and archives from a script.",
      "question": "Which command-line tool is used to automate iOS builds in a CI/CD environment?",
      "options": [
        "itunes-connect",
        "xcodebuild",
        "swiftc"
      ],
      "correctAnswer": "xcodebuild",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "xcodebuild archive \\\n  -workspace Runner.xcworkspace \\\n  -scheme Runner \\\n  -configuration Release \\\n  -archivePath build/Runner.xcarchive"
      }
    },
    {
      "cardId": "shell_026",
      "category": "iOS Compilation",
      "hint": "This file, generated by CocoaPods, must be opened in Xcode instead of the `.xcodeproj` file.",
      "question": "After running `pod install`, which file should you open to work on an iOS project?",
      "options": [
        "The `Podfile`",
        "The `.xcodeproj` file",
        "The `.xcworkspace` file"
      ],
      "correctAnswer": "The `.xcworkspace` file",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This command integrates dependencies and creates the workspace.\npod install\n\n# You must now open 'YourApp.xcworkspace' in Xcode."
      }
    },
    {
      "cardId": "shell_027",
      "category": "iOS Compilation",
      "hint": "This file contains essential metadata for an iOS application, such as its bundle identifier and version.",
      "question": "What is the purpose of the `Info.plist` file in an iOS project?",
      "options": [
        "To list all source code files.",
        "To store configuration data for the app.",
        "To list third-party dependencies."
      ],
      "correctAnswer": "To store configuration data for the app.",
      "content": {
        "type": "code",
        "language": "xml",
        "value": "<key>CFBundleVersion</key>\n<string>$(FLUTTER_BUILD_NUMBER)</string>\n<key>CFBundleDisplayName</key>\n<string>My App</string>"
      }
    },
    {
      "cardId": "shell_028",
      "category": "iOS Compilation",
      "hint": "This command installs dependencies based on the `Podfile.lock`, ensuring every developer has the exact same library versions.",
      "question": "What is the main function of the `pod install` command?",
      "options": [
        "It updates all pods to their newest versions.",
        "It installs pods according to the `Podfile.lock`.",
        "It creates the initial `Podfile`."
      ],
      "correctAnswer": "It installs pods according to the `Podfile.lock`.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "cd ios\n\n# Ensures a reproducible build by using locked versions.\npod install"
      }
    },
    {
      "cardId": "shell_029",
      "category": "iOS Compilation",
      "hint": "This command attempts to find newer versions for the pods listed in the `Podfile`.",
      "question": "When should you use `pod update` instead of `pod install`?",
      "options": [
        "On a new project clone",
        "When you want to update dependencies to new versions",
        "They do the same thing"
      ],
      "correctAnswer": "When you want to update dependencies to new versions",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "cd ios\n\n# Updates pods to the newest versions allowed by the Podfile.\npod update"
      }
    },
    {
      "cardId": "shell_030",
      "category": "iOS Compilation",
      "hint": "An Xcode Scheme defines a collection of targets to build, a configuration to use, and tests to execute.",
      "question": "What is a 'Scheme' in Xcode?",
      "options": [
        "The app's color theme",
        "A build configuration for a target",
        "A project's font settings"
      ],
      "correctAnswer": "A build configuration for a target",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# The -scheme parameter tells xcodebuild which target to build.\nxcodebuild build -workspace App.xcworkspace -scheme \"App-Prod\""
      }
    },
    {
      "cardId": "shell_031",
      "category": "iOS Compilation",
      "hint": "These are required by Apple to verify your identity as a developer and to deploy apps.",
      "question": "What two core components are needed for iOS code signing?",
      "options": [
        "Username and Password",
        "Signing Certificate and Provisioning Profile",
        "App ID and Bundle ID"
      ],
      "correctAnswer": "Signing Certificate and Provisioning Profile",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# A simplified build command showing signing parameters.\nxcodebuild archive -scheme Runner \\\n  CODE_SIGN_IDENTITY=\"iPhone Distribution: My Team\" \\\n  PROVISIONING_PROFILE=\"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\""
      }
    },
    {
      "cardId": "shell_032",
      "category": "Build Artifacts",
      "hint": "This is the older, universal package format for Android that can be directly installed on a device.",
      "question": "What is an `.apk` file (Android Package Kit)?",
      "options": [
        "A compressed source code archive.",
        "A self-contained, installable app package.",
        "A file that only works in the emulator."
      ],
      "correctAnswer": "A self-contained, installable app package.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This command generates a universal APK.\nflutter build apk --split-per-abi"
      }
    },
    {
      "cardId": "shell_033",
      "category": "Build Artifacts",
      "hint": "This is the modern, preferred format for submitting an app to the Google Play Store.",
      "question": "What is the file extension for an Android App Bundle?",
      "options": [".apk", ".aar", ".aab"],
      "correctAnswer": ".aab",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This command generates the app bundle.\nflutter build appbundle --release"
      }
    },
    {
      "cardId": "shell_034",
      "category": "Build Artifacts",
      "hint": "This is the final package that gets installed on an iOS device or submitted to the App Store.",
      "question": "The result of `flutter build ipa` is a file with what extension?",
      "options": [".ipa", ".app", ".xcarchive"],
      "correctAnswer": ".ipa",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This command generates the iOS App Store package.\nflutter build ipa --release"
      }
    },
    {
      "cardId": "shell_035",
      "category": "Build Artifacts",
      "hint": "This is an intermediate build format for iOS that contains the application and its debugging symbols.",
      "question": "What is an `.xcarchive` in the iOS build process?",
      "options": [
        "The final file uploaded to the App Store.",
        "An archive used to create an `.ipa` for distribution.",
        "A backup of the Xcode project settings."
      ],
      "correctAnswer": "An archive used to create an `.ipa` for distribution.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# The 'build ipa' command first creates an xcarchive.\n# The path is usually in 'build/ios/archive/'\nflutter build ipa"
      }
    },
    {
      "cardId": "shell_036",
      "category": "Build Comparison",
      "hint": "While both platforms have dependency managers, this file is central to defining them for Flutter itself.",
      "question": "Where are Dart and Flutter asset dependencies for both platforms defined?",
      "options": [
        "In `build.gradle` and `Podfile`",
        "In `pubspec.yaml`",
        "In separate `.txt` files"
      ],
      "correctAnswer": "In `pubspec.yaml`",
      "content": {
        "type": "code",
        "language": "yaml",
        "value": "# In pubspec.yaml\ndependencies:\n  flutter:\n    sdk: flutter\n  http: ^1.2.1"
      }
    },
    {
      "cardId": "shell_037",
      "category": "Build Comparison",
      "hint": "This file is specific to Android and is used to declare permissions, activities, and other core components of the app.",
      "question": "Which file is the 'app manifest' for the Android platform?",
      "options": [
        "`Info.plist`",
        "`build.gradle`",
        "`AndroidManifest.xml`"
      ],
      "correctAnswer": "`AndroidManifest.xml`",
      "content": {
        "type": "code",
        "language": "xml",
        "value": "<uses-permission android:name=\"android.permission.INTERNET\" />\n<application ... >\n    <activity ... >\n    </activity>\n</application>"
      }
    },
    {
      "cardId": "shell_038",
      "category": "Build Comparison",
      "hint": "Flutter acts as a high-level coordinator that directs the platform-specific tools.",
      "question": "What is the relationship between `flutter build` and the native toolchains (Gradle, Xcode)?",
      "options": [
        "It replaces them entirely.",
        "It delegates platform-specific work to them.",
        "It is completely independent of them."
      ],
      "correctAnswer": "It delegates platform-specific work to them.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# When you run this command...\nflutter build apk\n\n# ...Flutter is telling Gradle to run its 'assemble' task."
      }
    },
    {
      "cardId": "shell_039",
      "category": "Build Comparison",
      "hint": "The language used for configuration files differs significantly between the two platforms.",
      "question": "Gradle build scripts are written in Groovy/Kotlin, while CocoaPods Podfiles are written in...?",
      "options": [
        "Swift",
        "JSON",
        "Ruby"
      ],
      "correctAnswer": "Ruby",
      "content": {
        "type": "code",
        "language": "ruby",
        "value": "# A line from a Podfile, which uses Ruby syntax\ntarget 'Runner' do\n  pod 'Firebase/Analytics'\nend"
      }
    },
    {
      "cardId": "shell_040",
      "category": "Conditional Logic",
      "hint": "This structure forms the fundamental building block for making decisions in a script.",
      "question": "What is the basic syntax for an 'if' statement in a Bash script?",
      "options": [
        "if [ condition ]; then ... end if",
        "if ( condition ) { ... }",
        "if [ condition ]; then ... fi"
      ],
      "correctAnswer": "if [ condition ]; then ... fi",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "CONFIG_FILE=\"settings.conf\"\n\nif [ -f \"$CONFIG_FILE\" ]; then\n  echo \"INFO: Configuration file found.\"\nfi"
      }
    },
    {
      "cardId": "shell_041",
      "category": "Conditional Logic",
      "hint": "This structure allows for an alternative action to be taken when the initial condition is false.",
      "question": "How do you provide a fallback action in a Bash 'if' statement?",
      "options": [
        "Using the 'otherwise' keyword",
        "Using an 'else' block",
        "Using a 'case' block inside the 'if'"
      ],
      "correctAnswer": "Using an 'else' block",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "if [ \"$1\" == \"production\" ]; then\n  echo \"Running in production mode.\"\nelse\n  echo \"Running in development mode.\"\nfi"
      }
    },
    {
      "cardId": "shell_042",
      "category": "Conditional Logic",
      "hint": "This is a built-in command, often used as an alias for 'test', to evaluate expressions.",
      "question": "What is the purpose of the `[ ... ]` syntax in Bash conditionals?",
      "options": [
        "To group commands for subshell execution",
        "To define an array",
        "To test a condition or compare values"
      ],
      "correctAnswer": "To test a condition or compare values",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "COUNT=10\n\n# The brackets are used to test if COUNT is greater than 5\nif [ \"$COUNT\" -gt 5 ]; then\n  echo \"Count is greater than 5.\"\nfi"
      }
    },
    {
      "cardId": "shell_043",
      "category": "Conditional Logic",
      "hint": "Modern Bash scripting prefers this syntax over single brackets for more features and safety.",
      "question": "What is the main advantage of using double brackets `[[ ... ]]` over single brackets `[ ... ]`?",
      "options": [
        "It supports floating-point arithmetic.",
        "It prevents word splitting and supports pattern matching.",
        "It is required for running commands on remote servers."
      ],
      "correctAnswer": "It prevents word splitting and supports pattern matching.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# [[ ... ]] safely handles variables that might be empty or contain spaces.\nFILENAME=\"My Document.txt\"\nif [[ -f \"$FILENAME\" ]]; then\n  echo \"File '$FILENAME' exists.\"\nfi"
      }
    },
    {
      "cardId": "shell_044",
      "category": "Script Output",
      "hint": "This command is the standard way to print text to the terminal.",
      "question": "Which command is used to display a line of text on standard output?",
      "options": [
        "print",
        "display",
        "echo"
      ],
      "correctAnswer": "echo",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "echo \"Step 1: Cloning repository...\"\n# Some command here\necho \"Step 1: Done.\""
      }
    },
    {
      "cardId": "shell_045",
      "category": "Script Output",
      "hint": "This flag enables the interpretation of special characters like newlines (`\\n`) and tabs (`\\t`).",
      "question": "What does the `-e` flag do when used with the `echo` command?",
      "options": [
        "It sends the output to standard error instead of standard output.",
        "It enables interpretation of backslash escapes.",
        "It encrypts the output text."
      ],
      "correctAnswer": "It enables interpretation of backslash escapes.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# The -e flag allows \\n to create a new line.\necho -e \"ERROR: Build failed.\\nPlease check the logs.\""
      }
    },
    {
      "cardId": "shell_046",
      "category": "Script Control",
      "hint": "This command immediately terminates the script's execution.",
      "question": "Which command is used to stop a script and return a status code?",
      "options": [
        "stop",
        "exit",
        "break"
      ],
      "correctAnswer": "exit",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "echo \"Validating dependencies...\"\nif ! command -v flutter &> /dev/null; then\n  echo \"ERROR: Flutter SDK not found.\"\n  exit 1\nfi"
      }
    },
    {
      "cardId": "shell_047",
      "category": "Script Control",
      "hint": "By convention, this exit code signals that the script completed successfully.",
      "question": "What does an exit code of `0` signify?",
      "options": [
        "A critical error occurred.",
        "The script was terminated by the user.",
        "The script executed successfully."
      ],
      "correctAnswer": "The script executed successfully.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "echo \"Build complete.\"\nexit 0"
      }
    },
    {
      "cardId": "shell_048",
      "category": "Special Variables",
      "hint": "These variables represent the arguments passed to a script from the command line.",
      "question": "How do you access the first and second command-line arguments inside a script?",
      "options": [
        "arg1, arg2",
        "$1, $2",
        "ARGS[1], ARGS[2]"
      ],
      "correctAnswer": "$1, $2",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# To run: ./deploy.sh production v1.0.0\n\nENVIRONMENT=$1 # \"production\"\nVERSION=$2     # \"v1.0.0\"\n\necho \"Deploying version $VERSION to $ENVIRONMENT...\""
      }
    },
    {
      "cardId": "shell_049",
      "category": "Special Variables",
      "hint": "This special variable holds the exit status of the last command that was executed.",
      "question": "Which special variable would you check to see if the previous command succeeded?",
      "options": [
        "$STATUS",
        "$?",
        "$EXIT_CODE"
      ],
      "correctAnswer": "$?",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "flutter build apk\n\n# Check the exit code of the flutter command\nif [ $? -ne 0 ]; then\n    echo \"ERROR: Flutter build failed.\"\n    exit 1\nfi"
      }
    },
    {
      "cardId": "shell_050",
      "category": "String Operations",
      "hint": "This test operator is used inside brackets to check if a variable's value is an empty string.",
      "question": "Which test operator checks if a string is empty (has zero length)?",
      "options": [
        "-e",
        "-n",
        "-z"
      ],
      "correctAnswer": "-z",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "API_KEY=\"\"\n\n# This check is true because API_KEY is empty.\nif [ -z \"$API_KEY\" ]; then\n  echo \"ERROR: API_KEY is not set.\"\nfi"
      }
    },
    {
      "cardId": "shell_051",
      "category": "String Operations",
      "hint": "This test operator is the opposite of `-z`; it checks if a string is NOT empty.",
      "question": "How do you test if a variable contains any text (is not null)?",
      "options": [
        "-nz",
        "-n",
        "-s"
      ],
      "correctAnswer": "-n",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "USERNAME=\"admin\"\n\n# This check is true because USERNAME is not empty.\nif [ -n \"$USERNAME\" ]; then\n  echo \"Username is set to: $USERNAME\"\nfi"
      }
    },
    {
      "cardId": "shell_052",
      "category": "Logical Operators",
      "hint": "This operator is used within test conditions to reverse the outcome.",
      "question": "What is the function of the `!` (exclamation mark) operator in a `[ ... ]` test?",
      "options": [
        "It executes the command with high priority.",
        "It marks the line as important.",
        "It negates the result of the expression that follows."
      ],
      "correctAnswer": "It negates the result of the expression that follows.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# The code inside the 'if' runs if the file does NOT exist.\nif [ ! -f \"config.json\" ]; then\n  echo \"WARNING: config.json not found, using defaults.\"\nfi"
      }
    },
    {
      "cardId": "shell_053",
      "category": "Logical Operators",
      "hint": "Used to combine two conditions, requiring both to be true.",
      "question": "In a `[[ ... ]]` block, which operator represents a logical AND?",
      "options": [
        "-and",
        "&",
        "&&"
      ],
      "correctAnswer": "&&",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "USER=\"admin\"\nPERMISSIONS=755\n\nif [[ \"$USER\" == \"admin\" && \"$PERMISSIONS\" -eq 755 ]]; then\n  echo \"Admin user with correct permissions.\"\nfi"
      }
    },
    {
      "cardId": "shell_054",
      "category": "File System Tests",
      "hint": "This test operator checks if a given path exists and is a regular file, not a directory.",
      "question": "Which file test operator checks for the existence of a regular file?",
      "options": [
        "-d",
        "-f",
        "-e"
      ],
      "correctAnswer": "-f",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "if [ -f \"/etc/hosts\" ]; then\n  echo \"INFO: /etc/hosts is a file.\"\nelse\n  echo \"INFO: /etc/hosts is not a regular file or does not exist.\"\nfi"
      }
    },
    {
      "cardId": "shell_055",
      "category": "File System Tests",
      "hint": "This test operator is essential for checking if a script has been granted the necessary permissions to be run.",
      "question": "Which test operator checks if a file has execute permissions?",
      "options": [
        "-r",
        "-w",
        "-x"
      ],
      "correctAnswer": "-x",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "if [ -x \"./deploy.sh\" ]; then\n  ./deploy.sh\nelse\n  echo \"ERROR: deploy.sh is not executable. Run 'chmod +x deploy.sh' first.\"\nfi"
      }
    },
    {
      "cardId": "shell_056",
      "category": "Environment Variables",
      "hint": "This command makes a variable from a script available to any other programs that the script calls.",
      "question": "What is the purpose of the `export` command?",
      "options": [
        "To print the variable's value to a file.",
        "To make a variable accessible to child processes.",
        "To import variables from another file."
      ],
      "correctAnswer": "To make a variable accessible to child processes.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# This makes BUILD_NUMBER available to the flutter command.\nexport BUILD_NUMBER=123\nflutter build apk"
      }
    },
    {
      "cardId": "shell_057",
      "category": "Environment Variables",
      "hint": "A common use case for this command is to modify the system's search path for executables.",
      "question": "How would you add a new directory to the `$PATH` environment variable for the current session?",
      "options": [
        "PATH.add(\"/usr/local/bin\")",
        "set PATH += \"/usr/local/bin\"",
        "export PATH=\"/usr/local/bin:$PATH\""
      ],
      "correctAnswer": "export PATH=\"/usr/local/bin:$PATH\"",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Add the local node modules binaries to the path\nexport PATH=\"./node_modules/.bin:$PATH\"\n\n# Now you can run locally installed CLIs directly\nwebpack"
      }
    },
    {
      "cardId": "shell_058",
      "category": "Command Substitution",
      "hint": "This syntax allows you to capture the output of a command and store it in a variable.",
      "question": "What is the modern, preferred syntax for command substitution?",
      "options": [
        "`command` (backticks)",
        "$(command)",
        "&{command}"
      ],
      "correctAnswer": "$(command)",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)\necho \"Building from branch: $CURRENT_BRANCH\""
      }
    },
    {
      "cardId": "shell_059",
      "category": "Command Substitution",
      "hint": "This is often used to get a precise, dynamically generated string, such as a timestamp.",
      "question": "How can you create a filename that includes the current date in YYYY-MM-DD format?",
      "options": [
        "BACKUP_FILE=\"backup-date()\"",
        "BACKUP_FILE=\"backup-CURRENT_DATE\"",
        "BACKUP_FILE=\"backup-$(date +%F)\""
      ],
      "correctAnswer": "BACKUP_FILE=\"backup-$(date +%F)\"",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "TIMESTAMP=$(date +%F_%T)\nLOG_FILE=\"build-$TIMESTAMP.log\"\necho \"Logging build to $LOG_FILE\""
      }
    },
    {
      "cardId": "shell_060",
      "category": "Pipelines",
      "hint": "This character connects the output of one command to the input of another, creating a chain.",
      "question": "What is the function of the pipe `|` operator?",
      "options": [
        "It runs the two commands in parallel.",
        "It sends the output of the left command to the input of the right command.",
        "It performs a logical OR between two conditions."
      ],
      "correctAnswer": "It sends the output of the left command to the input of the right command.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# List files, then filter for '.log' files.\nls -1 | grep \".log\""
      }
    },
    {
      "cardId": "shell_061",
      "category": "Pipelines",
      "hint": "Chaining commands with this operator allows for powerful, multi-step text processing.",
      "question": "How could you count the number of files in the current directory?",
      "options": [
        "ls | wc -l",
        "ls -count",
        "count(ls)"
      ],
      "correctAnswer": "ls | wc -l",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# List processes, filter for 'java', then count the lines.\nps aux | grep 'java' | wc -l"
      }
    },
    {
      "cardId": "shell_062",
      "category": "Text Processing",
      "hint": "This utility is used to find lines of text that match a pattern.",
      "question": "Which command would you use to find all lines containing the word 'ERROR' in a log file?",
      "options": [
        "find 'ERROR' in app.log",
        "search app.log for 'ERROR'",
        "grep 'ERROR' app.log"
      ],
      "correctAnswer": "grep 'ERROR' app.log",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# The -i flag makes the search case-insensitive\ngrep -i \"version\" build.properties"
      }
    },
    {
      "cardId": "shell_063",
      "category": "Text Processing",
      "hint": "This utility is used to extract specific columns or sections from lines of text.",
      "question": "What is the `cut` command primarily used for?",
      "options": [
        "To shorten long lines of text to a specific length.",
        "To extract sections from each line of a file.",
        "To remove files from a directory."
      ],
      "correctAnswer": "To extract sections from each line of a file.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Get the 5th column from the output of 'ls -l'\nls -l | cut -d' ' -f5"
      }
    },
    {
      "cardId": "shell_064",
      "category": "Text Processing",
      "hint": "A common use case for `cut` is to split a line by a specific character to get a value.",
      "question": "How can you extract the value from a line like `key=value`?",
      "options": [
        "grep 'key=value' | split '='",
        "echo 'key=value' | cut -d'=' -f2",
        "echo 'key=value' | get -part 2"
      ],
      "correctAnswer": "echo 'key=value' | cut -d'=' -f2",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "LINE=\"version=1.2.3\"\n\n# Split the string by '=' and get the second field\nVERSION=$(echo $LINE | cut -d'=' -f2)\n\necho \"The version is: $VERSION\""
      }
    },
    {
      "cardId": "shell_065",
      "category": "Parameter Expansion",
      "hint": "This syntax allows you to provide a fallback value for a variable if it's not set.",
      "question": "What is the purpose of the `${VAR:-default}` syntax?",
      "options": [
        "It assigns a new value to VAR.",
        "It deletes the variable VAR.",
        "It uses 'default' if VAR is empty or unset, otherwise uses VAR's value."
      ],
      "correctAnswer": "It uses 'default' if VAR is empty or unset, otherwise uses VAR's value.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# If the $1 argument is missing, ENVIRONMENT will be set to 'development'.\nENVIRONMENT=${1:-development}\necho \"Using environment: $ENVIRONMENT\""
      }
    },
    {
      "cardId": "shell_066",
      "category": "Parameter Expansion",
      "hint": "This variant of parameter expansion not only provides a default, but also assigns it back to the variable.",
      "question": "What is the difference between `${VAR:-default}` and `${VAR:=default}`?",
      "options": [
        "There is no difference.",
        "`:=` also assigns the default value back to VAR if it was unset.",
        "`:=` requires the default to be a number."
      ],
      "correctAnswer": "`:=` also assigns the default value back to VAR if it was unset.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# If CONFIG_PATH is unset, it gets assigned the default value.\n: ${CONFIG_PATH:=\"/etc/app/config.json\"}\n\n# Now CONFIG_PATH is guaranteed to have a value.\necho \"Config path is: $CONFIG_PATH\""
      }
    },
    {
      "cardId": "shell_067",
      "category": "Script Input",
      "hint": "This construct, known as a 'Here Document', is used to feed a block of text to a command.",
      "question": "What is the primary use of the `cat <<EOF ... EOF` structure?",
      "options": [
        "To define a multi-line string variable.",
        "To read the content of the file named 'EOF'.",
        "To pass a multi-line block of text to a command's standard input."
      ],
      "correctAnswer": "To pass a multi-line block of text to a command's standard input.",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "# Display a help message to the user.\ncat <<EOF\nUsage: $0 [options]\n\nThis script builds the project.\n  -h, --help    Display this help message\nEOF"
      }
    },
    {
      "cardId": "shell_068",
      "category": "Script Input",
      "hint": "A Here Document can be redirected to a file, which is a convenient way to create configuration files dynamically.",
      "question": "How can you use a Here Document to write a multi-line configuration file?",
      "options": [
        "echo '...' >> config.json",
        "cat <<EOF > config.json ... EOF",
        "write file config.json { ... }"
      ],
      "correctAnswer": "cat <<EOF > config.json ... EOF",
      "content": {
        "type": "code",
        "language": "bash",
        "value": "DB_USER=\"admin\"\n\n# Creates a new config.ini file with content\ncat <<EOF > config.ini\n[database]\nuser = $DB_USER\nport = 5432\nEOF"
      }
    }
  ]
}